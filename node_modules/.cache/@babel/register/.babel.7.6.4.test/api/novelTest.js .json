{
  "{\"sourceRoot\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\test\\\\api\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"filename\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\test\\\\api\\\\novelTest.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test/api/novelTest.js \",\"root\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"plugins\":[],\"presets\":[]}:7.6.4:test/api/novelTest.js ": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\test\\api",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\test\\api\\novelTest.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test/api/novelTest.js ",
      "root": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\test\\api\\novelTest.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\test\\api\\novelTest.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\test\\api",
        "sourceFileName": "novelTest.js"
      }
    },
    "ast": null,
    "code": "const chai = require(\"chai\");\n\nconst expect = chai.expect;\n\nconst request = require(\"supertest\");\n\nconst MongoMemoryServer = require(\"mongodb-memory-server\").MongoMemoryServer;\n\nconst Novel = require(\"../../models/novels\");\n\nconst User = require(\"../../models/user\");\n\nconst Author = require(\"../../models/author\");\n\nconst mongoose = require(\"mongoose\");\n\nmongoose.set(\"useFindAndModify\", false);\n\nconst _ = require(\"lodash\");\n\nlet server;\nlet mongod;\nlet db, validID, validID1, validID2;\ndescribe(\"Novel-Ideas\", () => {\n  before(async () => {\n    try {\n      mongod = new MongoMemoryServer({\n        instance: {\n          port: 27017,\n          dbPath: \"./test/database\",\n          dbName: \"novels\"\n        }\n      });\n      await mongod.getConnectionString();\n      mongoose.connect(\"mongodb://localhost:27017/novels\", {\n        useNewUrlParser: true,\n        useUnifiedTopology: true\n      });\n      server = require(\"../../bin/www\");\n      db = mongoose.connection;\n    } catch (error) {\n      console.log(error);\n    }\n  });\n  after(async () => {\n    try {\n      await mongoose.connection.db.dropDatabase();\n    } catch (error) {\n      console.log(error);\n    }\n  });\n  beforeEach(async () => {\n    try {\n      await Novel.deleteMany({});\n      let novel = new Novel();\n      novel.name = \"Rusty Hotel\";\n      novel.author = \"Rusty\";\n      novel.type = \"Horror\";\n      novel.recommender = \"Merry\";\n      novel.grade = 5;\n      await novel.save();\n      novel = new Novel();\n      novel.name = \"Cube Escape\";\n      novel.author = \"Rusty\";\n      novel.type = \"Horror\";\n      novel.recommender = \"Merry\";\n      novel.grade = 3;\n      await novel.save();\n      novel = await Novel.findOne({\n        name: \"Rusty Hotel\"\n      });\n      validID = novel._id;\n      await User.deleteMany({});\n      let user = new User();\n      user.username = \"Merry\";\n      user.password = \"123456\";\n      user.email = \"merry@ie\";\n      await user.save();\n      user = new User();\n      user.username = \"Lily\";\n      user.password = \"123456\";\n      user.email = \"lily@ie\";\n      await user.save();\n      user = await User.findOne({\n        username: \"Merry\"\n      });\n      validID1 = user._id;\n      await Author.deleteMany({});\n      let author = new Author();\n      author.name = \"Rusty\";\n      author.keyword1 = \"Horror\";\n      author.keyword2 = \"Science Fiction\";\n      author.numofbooks = 4;\n      author.numofcollected = 9;\n      await author.save();\n      author = new Author();\n      author.name = \"White\";\n      author.keyword1 = \"Romantic\";\n      author.keyword2 = \"Science Fiction\";\n      author.numofbooks = 2;\n      author.numofcollected = 5;\n      await author.save();\n      author = await Author.findOne({\n        name: \"Rusty\"\n      });\n      validID2 = author._id;\n    } catch (error) {\n      console.log(error);\n    }\n  });\n  describe(\"Novel\", () => {\n    describe(\"GET/novels\", () => {\n      it(\"should GET all the novels\", done => {\n        request(server).get(\"/novels\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n          try {\n            expect(res.body).to.be.a(\"array\");\n            expect(res.body.length).to.equal(2);\n\n            let result = _.map(res.body, novel => {\n              return {\n                name: novel.name,\n                author: novel.author,\n                type: novel.type,\n                recommender: novel.recommender\n              };\n            });\n\n            expect(result).to.deep.include({\n              name: \"Rusty Hotel\",\n              author: \"Rusty\",\n              type: \"Horror\",\n              recommender: \"Merry\"\n            });\n            expect(result).to.deep.include({\n              name: \"Cube Escape\",\n              author: \"Rusty\",\n              type: \"Horror\",\n              recommender: \"Merry\"\n            });\n            done();\n          } catch (e) {\n            done(e);\n          }\n        });\n      });\n    });\n    describe(\"GET /novels/:id\", () => {\n      describe(\"when the id is valid\", () => {\n        it(\"should return the matching novel\", done => {\n          request(server).get(`/novels/${validID}`).set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n            expect(res.body[0]).to.have.property(\"name\", \"Rusty Hotel\");\n            expect(res.body[0]).to.have.property(\"author\", \"Rusty\");\n            expect(res.body[0]).to.have.property(\"type\", \"Horror\");\n            expect(res.body[0]).to.have.property(\"recommender\", \"Merry\");\n            done(err);\n          });\n        });\n      });\n      describe(\"when the id is invalid\", () => {\n        it(\"should return the NOT found message\", done => {\n          request(server).get(\"/novels/1000000020202\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n            expect(res.body.message).equals(\"Novel NOT Found!\");\n            done(err);\n          });\n        });\n      });\n    });\n    describe(\"POST /novels\", () => {\n      it(\"should return can not be empty message\", () => {\n        const novel = {\n          name: \"\",\n          author: \"Lily\",\n          type: \"Romantic\",\n          recommender: \"HP\"\n        };\n        return request(server).post(\"/novels\").send(novel).then(res => {\n          expect(res.body.message).equals(\"The novel name can not be empty\");\n        });\n      });\n      it(\"should return novel already existed message\", () => {\n        const novel = {\n          name: \"Rusty Hotel\",\n          author: \"Rusty\",\n          type: \"Horro\",\n          recommender: \"HP\"\n        };\n        return request(server).post(\"/novels\").send(novel).expect(200).then(res => {\n          expect(res.body.message).equals(\"The novel is already exist\");\n        });\n      });\n      it(\"should return confirmation message and update mongodb\", () => {\n        const novel = {\n          name: \"My Girl\",\n          author: \"Lily\",\n          type: \"Romantic\",\n          recommender: \"HP\"\n        };\n        return request(server).post(\"/novels\").send(novel).expect(200).then(res => {\n          expect(res.body.message).equals(\"Novel Successfully added\");\n          validID = res.body.data._id;\n        });\n      });\n      after(() => {\n        return request(server).get(`/novels/${validID}`).expect(200).then(res => {\n          expect(res.body[0]).to.have.property(\"name\", \"My Girl\");\n          expect(res.body[0]).to.have.property(\"author\", \"Lily\");\n          expect(res.body[0]).to.have.property(\"type\", \"Romantic\");\n          expect(res.body[0]).to.have.property(\"recommender\", \"HP\");\n        });\n      });\n    });\n    describe(\"PUT /novels/:id\", () => {\n      describe(\"when the id is valid\", () => {\n        it(\"should return a message and update the grade\", () => {\n          return request(server).put(`/novels/${validID}`).send({\n            \"grade\": 4\n          }).expect(200).then(resp => {\n            expect(resp.body).to.include({\n              message: \"Novel Successfully graded!\"\n            });\n            expect(resp.body.data).to.have.property(\"grade\", 4);\n          });\n        });\n        after(() => {\n          return request(server).get(`/novels/${validID}`).expect(200).then(resp => {\n            expect(resp.body[0]).to.have.property(\"grade\", 4);\n          });\n        });\n      });\n      describe(\"when the id is invalid\", () => {\n        it(\"should return the Novel NOT Found! message\", done => {\n          request(server).get(\"/novels/1000000020202\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n            expect(res.body.message).equals(\"Novel NOT Found!\");\n            done(err);\n          });\n        });\n      });\n    });\n    describe(\"DELETE /novels/:id\", () => {\n      describe(\"when the id is valid\", () => {\n        it(\"should return confirmation message and update database\", () => {\n          request(server).delete(`novels/${validID}`).set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).then(res => {\n            expect(res.body.message).equals(\"Novels Successfully Deleted!\");\n          });\n        });\n      });\n      describe(\"when the id is invalid\", () => {\n        it(\"should return the NOT found message\", () => {\n          request(server).delete(\"/novels/1000000020202\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).then(res => {\n            expect(res.body.message).equals(\"Novels NOT Found!\");\n          });\n        });\n      });\n    });\n  });\n  describe(\"User\", () => {\n    describe(\"GET /user/:id\", () => {\n      describe(\"when the id is valid\", () => {\n        it(\"should return the matching user\", done => {\n          request(server).get(`/user/${validID1}`).set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n            expect(res.body[0]).to.have.property(\"username\", \"Merry\");\n            expect(res.body[0]).to.have.property(\"password\", \"123456\");\n            expect(res.body[0]).to.have.property(\"email\", \"merry@ie\");\n            done(err);\n          });\n        });\n      });\n      describe(\"when the id is invalid\", () => {\n        it(\"should return the NOT found message\", done => {\n          request(server).get(\"/user/10001000000020202\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n            expect(res.body.message).equals(\"User NOT Found!\");\n            done(err);\n          });\n        });\n      });\n    });\n    describe(\"POST /user\", () => {\n      it(\"should return username can not be empty message\", () => {\n        const user = {\n          username: \"\",\n          password: \"asdfgh\",\n          email: \"sth@wit\"\n        };\n        return request(server).post(\"/user\").send(user).then(res => {\n          expect(res.body.message).equals(\"The username can not be empty\");\n        });\n      });\n      it(\"should return password can not be empty message\", () => {\n        const user = {\n          username: \"Justion\",\n          password: \"\",\n          email: \"sth@wit\"\n        };\n        return request(server).post(\"/user\").send(user).then(res => {\n          expect(res.body.message).equals(\"The password can not be empty\");\n        });\n      });\n      it(\"should return email can not be empty message\", () => {\n        const user = {\n          username: \"Justin\",\n          password: \"asdfgh\",\n          email: \"\"\n        };\n        return request(server).post(\"/user\").send(user).then(res => {\n          expect(res.body.message).equals(\"The email can not be empty\");\n        });\n      });\n      it(\"should return username occupied message\", () => {\n        const user = {\n          username: \"Merry\",\n          password: \"asdfgh\",\n          email: \"sth@wit\"\n        };\n        return request(server).post(\"/user\").send(user).expect(200).then(res => {\n          expect(res.body.message).equals(\"The username is occupied\");\n        });\n      });\n      it(\"should return confirmation message and update mongodb\", () => {\n        const user = {\n          username: \"Justin\",\n          password: \"asdfgh\",\n          email: \"Justinsth@wit\"\n        };\n        return request(server).post(\"/user\").send(user).expect(200).then(res => {\n          expect(res.body.message).equals(\"User Successfully registered\");\n          validID1 = res.body.data._id;\n        });\n      });\n      after(() => {\n        return request(server).get(`/user/${validID1}`).expect(200).then(res => {\n          expect(res.body[0]).to.have.property(\"username\", \"Justin\");\n          expect(res.body[0]).to.have.property(\"password\", \"asdfgh\");\n          expect(res.body[0]).to.have.property(\"email\", \"Justinsth@wit\");\n        });\n      });\n    });\n    describe(\"POST /user/login\", () => {\n      it(\"should return username or password can not be empty message\", () => {\n        const user = {\n          username: \"\",\n          password: \"asdfgh\"\n        };\n        return request(server).post(\"/user/login\").send(user).then(res => {\n          expect(res.body.message).equals(\"The username or password  can not be empty\");\n        });\n      });\n      it(\"should return username is not exist message\", () => {\n        const user = {\n          username: \"David\",\n          password: \"asdfgh\"\n        };\n        return request(server).post(\"/user/login\").send(user).expect(200).then(res => {\n          expect(res.body.message).equals(\"Username is not exist\");\n        });\n      });\n      it(\"should return wrong password message\", () => {\n        const user = {\n          username: \"Merry\",\n          password: \"asdfgh\"\n        };\n        return request(server).post(\"/user/login\").send(user).expect(200).then(res => {\n          expect(res.body.message).equals(\"Wrong Password\");\n        });\n      });\n      it(\"should return confirmation message and update mongodb\", () => {\n        const user = {\n          username: \"Merry\",\n          password: \"123456\"\n        };\n        return request(server).post(\"/user/login\").send(user).expect(200).then(res => {\n          expect(res.body.message).equals(\"Sign in Successfully\");\n        });\n      });\n    });\n    describe(\"PUT /user/:id\", () => {\n      describe(\"when the id is valid\", () => {\n        it(\"should return repeated password message\", () => {\n          return request(server).put(`/user/${validID1}`).send({\n            \"password\": \"123456\"\n          }).expect(200).then(resp => {\n            expect(resp.body).to.include({\n              message: \"No change to the Password\"\n            });\n            expect(resp.body.data).to.have.property(\"password\", \"123456\");\n          });\n        });\n        it(\"should return a message and update the password\", () => {\n          return request(server).put(`/user/${validID1}`).send({\n            \"password\": \"123456abc\"\n          }).expect(200).then(resp => {\n            expect(resp.body).to.include({\n              message: \"Password Successfully changed!\"\n            });\n            expect(resp.body.data).to.have.property(\"password\", \"123456abc\");\n          });\n        });\n        after(() => {\n          return request(server).get(`/user/${validID1}`).expect(200).then(resp => {\n            expect(resp.body[0]).to.have.property(\"password\", \"123456abc\");\n          });\n        });\n      });\n      describe(\"when the id is invalid\", () => {\n        it(\"should return the User NOT Found! message\", done => {\n          request(server).get(\"/user/1000000020202\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n            expect(res.body.message).equals(\"User NOT Found!\");\n            done(err);\n          });\n        });\n      });\n    });\n  });\n  describe(\"Author\", () => {\n    describe(\"GET/author\", () => {\n      it(\"should GET all the authors\", done => {\n        request(server).get(\"/author\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n          try {\n            expect(res.body).to.be.a(\"array\");\n            expect(res.body.length).to.equal(2);\n\n            let result = _.map(res.body, author => {\n              return {\n                name: author.name,\n                keyword1: author.keyword1,\n                keyword2: author.keyword2,\n                numofbooks: author.numofbooks,\n                numofcollected: author.numofcollected\n              };\n            });\n\n            expect(result).to.deep.include({\n              name: \"Rusty\",\n              keyword1: \"Horror\",\n              keyword2: \"Science Fiction\",\n              numofbooks: 4,\n              numofcollected: 9\n            });\n            expect(result).to.deep.include({\n              name: \"White\",\n              keyword1: \"Romantic\",\n              keyword2: \"Science Fiction\",\n              numofbooks: 2,\n              numofcollected: 5\n            });\n            done();\n          } catch (e) {\n            done(e);\n          }\n        });\n      });\n    });\n    describe(\"GET /author/:id\", () => {\n      describe(\"when the id is valid\", () => {\n        it(\"should return the matching author\", done => {\n          request(server).get(`/author/${validID2}`).set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n            expect(res.body[0]).to.have.property(\"name\", \"Rusty\");\n            expect(res.body[0]).to.have.property(\"keyword1\", \"Horror\");\n            expect(res.body[0]).to.have.property(\"keyword2\", \"Science Fiction\");\n            expect(res.body[0]).to.have.property(\"numofbooks\", 4);\n            expect(res.body[0]).to.have.property(\"numofcollected\", 9);\n            done(err);\n          });\n        });\n      });\n      describe(\"when the id is invalid\", () => {\n        it(\"should return the NOT found message\", done => {\n          request(server).get(\"/author/100021000000020202\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n            expect(res.body.message).equals(\"Author NOT Found!\");\n            done(err);\n          });\n        });\n      });\n    });\n    describe(\"POST /author\", () => {\n      it(\"should return can not be empty message\", () => {\n        const author = {\n          name: \"\",\n          keyword1: \"Horror\",\n          keyword2: \"Science Fiction\",\n          numofbooks: 4\n        };\n        return request(server).post(\"/author\").send(author).then(res => {\n          expect(res.body.message).equals(\"The author name can not be empty\");\n        });\n      });\n      it(\"should return author already existed message\", () => {\n        const author = {\n          name: \"Rusty\",\n          keyword1: \"Horror\",\n          keyword2: \"Science Fiction\",\n          numofbooks: 4\n        };\n        return request(server).post(\"/author\").send(author).expect(200).then(res => {\n          expect(res.body.message).equals(\"The author is already exist\");\n        });\n      });\n      it(\"should return confirmation message and update mongodb\", () => {\n        const author = {\n          name: \"Ella\",\n          keyword1: \"History\",\n          keyword2: \"Whodunit\",\n          numofbooks: 3\n        };\n        return request(server).post(\"/author\").send(author).expect(200).then(res => {\n          expect(res.body.message).equals(\"Author Successfully added\");\n          validID2 = res.body.data._id;\n        });\n      });\n      after(() => {\n        return request(server).get(`/author/${validID2}`).expect(200).then(res => {\n          expect(res.body[0]).to.have.property(\"name\", \"Ella\");\n          expect(res.body[0]).to.have.property(\"keyword1\", \"History\");\n          expect(res.body[0]).to.have.property(\"keyword2\", \"Whodunit\");\n          expect(res.body[0]).to.have.property(\"numofbooks\", 3);\n          expect(res.body[0]).to.have.property(\"numofcollected\", 0);\n        });\n      });\n    });\n    describe(\"PUT /author/:id/collect\", () => {\n      describe(\"when the id is valid\", () => {\n        it(\"should return a message and the author number of collected increased by 1\", () => {\n          return request(server).put(`/author/${validID2}/collect`).expect(200).then(resp => {\n            expect(resp.body).to.include({\n              message: \"Author Successfully collected!\"\n            });\n            expect(resp.body.data).to.have.property(\"numofcollected\", 10);\n          });\n        });\n        after(() => {\n          return request(server).get(`/author/${validID2}`).set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).then(resp => {\n            expect(resp.body[0]).to.have.property(\"numofcollected\", 10);\n          });\n        });\n      });\n      describe(\"when the id is invalid\", () => {\n        it(\"should return a 404 and a message for invalid author id\", () => {\n          return request(server).put(\"/author/11000100201/collect\").expect(200).then(resp => {\n            expect(resp.body).to.include({\n              message: \"Author NOT Found!\"\n            });\n          });\n        });\n      });\n    });\n    describe(\"DELETE /author/:id\", () => {\n      describe(\"when the id is valid\", () => {\n        it(\"should return confirmation message\", () => {\n          request(server).delete(`/author/${validID2}`).set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).then(resp => {\n            expect(resp.body).to.include({\n              message: \"Author Successfully Deleted!\"\n            });\n          });\n        });\n      });\n      describe(\"when the id is invalid\", () => {\n        it(\"should return NOT found message\", () => {\n          request(server).delete(\"/author/12001020100101\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).then(resp => {\n            expect(resp.body).to.include({\n              message: \"Author NOT Found!\"\n            });\n          });\n        });\n      });\n    });\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "novelTest.js"
      ],
      "names": [
        "chai",
        "require",
        "expect",
        "request",
        "MongoMemoryServer",
        "Novel",
        "User",
        "Author",
        "mongoose",
        "set",
        "_",
        "server",
        "mongod",
        "db",
        "validID",
        "validID1",
        "validID2",
        "describe",
        "before",
        "instance",
        "port",
        "dbPath",
        "dbName",
        "getConnectionString",
        "connect",
        "useNewUrlParser",
        "useUnifiedTopology",
        "connection",
        "error",
        "console",
        "log",
        "after",
        "dropDatabase",
        "beforeEach",
        "deleteMany",
        "novel",
        "name",
        "author",
        "type",
        "recommender",
        "grade",
        "save",
        "findOne",
        "_id",
        "user",
        "username",
        "password",
        "email",
        "keyword1",
        "keyword2",
        "numofbooks",
        "numofcollected",
        "it",
        "done",
        "get",
        "end",
        "err",
        "res",
        "body",
        "to",
        "be",
        "a",
        "length",
        "equal",
        "result",
        "map",
        "deep",
        "include",
        "e",
        "have",
        "property",
        "message",
        "equals",
        "post",
        "send",
        "then",
        "data",
        "put",
        "resp",
        "delete"
      ],
      "mappings": "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",
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\test\\api",
      "sourcesContent": [
        "const chai = require(\"chai\")\r\nconst expect = chai.expect\r\nconst request = require(\"supertest\")\r\nconst MongoMemoryServer = require(\"mongodb-memory-server\").MongoMemoryServer\r\nconst Novel = require(\"../../models/novels\")\r\nconst User = require(\"../../models/user\")\r\nconst Author = require(\"../../models/author\")\r\nconst mongoose = require(\"mongoose\")\r\nmongoose.set(\"useFindAndModify\", false)\r\nconst _ = require(\"lodash\")\r\n\r\nlet server\r\nlet mongod\r\nlet db, validID,validID1,validID2\r\n\r\ndescribe(\"Novel-Ideas\", () => {\r\n    before(async () => {\r\n        try {\r\n            mongod = new MongoMemoryServer({\r\n                instance: {\r\n                    port: 27017,\r\n                    dbPath: \"./test/database\",\r\n                    dbName: \"novels\"\r\n                }\r\n            })\r\n            await mongod.getConnectionString()\r\n\r\n            mongoose.connect(\"mongodb://localhost:27017/novels\", {\r\n                useNewUrlParser: true,\r\n                useUnifiedTopology: true\r\n            })\r\n            server = require(\"../../bin/www\")\r\n            db = mongoose.connection\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    })\r\n\r\n    after(async () => {\r\n        try {\r\n            await mongoose.connection.db.dropDatabase()\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    })\r\n\r\n    beforeEach(async () => {\r\n        try {\r\n            await Novel.deleteMany({})\r\n            let novel = new Novel()\r\n            novel.name = \"Rusty Hotel\"\r\n            novel.author = \"Rusty\"\r\n            novel.type = \"Horror\"\r\n            novel.recommender = \"Merry\"\r\n            novel.grade = 5\r\n            await novel.save()\r\n            novel = new Novel()\r\n            novel.name = \"Cube Escape\"\r\n            novel.author = \"Rusty\"\r\n            novel.type = \"Horror\"\r\n            novel.recommender = \"Merry\"\r\n            novel.grade = 3\r\n            await novel.save()\r\n            novel = await Novel.findOne({name: \"Rusty Hotel\"})\r\n            validID = novel._id\r\n\r\n            await User.deleteMany({})\r\n            let user = new User()\r\n            user.username = \"Merry\"\r\n            user.password = \"123456\"\r\n            user.email = \"merry@ie\"\r\n            await user.save()\r\n            user = new User()\r\n            user.username = \"Lily\"\r\n            user.password = \"123456\"\r\n            user.email = \"lily@ie\"\r\n            await user.save()\r\n            user = await User.findOne({username: \"Merry\"})\r\n            validID1 = user._id\r\n\r\n            await Author.deleteMany({})\r\n            let author = new Author()\r\n            author.name = \"Rusty\"\r\n            author.keyword1 = \"Horror\"\r\n            author.keyword2 = \"Science Fiction\"\r\n            author.numofbooks = 4\r\n            author.numofcollected = 9\r\n            await author.save()\r\n            author = new Author()\r\n            author.name = \"White\"\r\n            author.keyword1 = \"Romantic\"\r\n            author.keyword2 = \"Science Fiction\"\r\n            author.numofbooks = 2\r\n            author.numofcollected = 5\r\n            await author.save()\r\n            author = await Author.findOne({name: \"Rusty\"})\r\n            validID2 = author._id\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    })\r\n    describe(\"Novel\", () => {\r\n        describe(\"GET/novels\", () => {\r\n            it(\"should GET all the novels\", done => {\r\n                request(server)\r\n                    .get(\"/novels\")\r\n                    .set(\"Accept\", \"application/json\")\r\n                    .expect(\"Content-Type\", /json/)\r\n                    .expect(200)\r\n                    .end((err, res) => {\r\n                        try {\r\n                            expect(res.body).to.be.a(\"array\")\r\n                            expect(res.body.length).to.equal(2)\r\n                            let result = _.map(res.body, novel => {\r\n                                return {\r\n                                    name: novel.name,\r\n                                    author: novel.author,\r\n                                    type: novel.type,\r\n                                    recommender: novel.recommender,\r\n                                }\r\n                            })\r\n                            expect(result).to.deep.include({\r\n                                name: \"Rusty Hotel\",\r\n                                author: \"Rusty\",\r\n                                type: \"Horror\",\r\n                                recommender: \"Merry\"\r\n\r\n                            })\r\n                            expect(result).to.deep.include({\r\n                                name: \"Cube Escape\",\r\n                                author: \"Rusty\",\r\n                                type: \"Horror\",\r\n                                recommender: \"Merry\"\r\n\r\n                            })\r\n                            done()\r\n                        } catch (e) {\r\n                            done(e)\r\n                        }\r\n                    })\r\n            })\r\n        })\r\n        describe(\"GET /novels/:id\", () => {\r\n            describe(\"when the id is valid\", () => {\r\n                it(\"should return the matching novel\", done => {\r\n                    request(server)\r\n                        .get(`/novels/${validID}`)\r\n                        .set(\"Accept\", \"application/json\")\r\n                        .expect(\"Content-Type\", /json/)\r\n                        .expect(200)\r\n                        .end((err, res) => {\r\n                            expect(res.body[0]).to.have.property(\"name\", \"Rusty Hotel\")\r\n                            expect(res.body[0]).to.have.property(\"author\", \"Rusty\")\r\n                            expect(res.body[0]).to.have.property(\"type\", \"Horror\")\r\n                            expect(res.body[0]).to.have.property(\"recommender\", \"Merry\")\r\n                            done(err)\r\n                        })\r\n                })\r\n            })\r\n            describe(\"when the id is invalid\", () => {\r\n                it(\"should return the NOT found message\", done => {\r\n                    request(server)\r\n                        .get(\"/novels/1000000020202\")\r\n                        .set(\"Accept\", \"application/json\")\r\n                        .expect(\"Content-Type\", /json/)\r\n                        .expect(200)\r\n                        .end((err, res) => {\r\n                            expect(res.body.message).equals(\"Novel NOT Found!\")\r\n                            done(err)\r\n                        })\r\n                })\r\n            })\r\n        })\r\n        describe(\"POST /novels\", () => {\r\n            it(\"should return can not be empty message\", () => {\r\n                const novel = {\r\n                    name: \"\",\r\n                    author: \"Lily\",\r\n                    type: \"Romantic\",\r\n                    recommender: \"HP\"\r\n                }\r\n\r\n                return request(server)\r\n                    .post(\"/novels\")\r\n                    .send(novel)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"The novel name can not be empty\")\r\n                    })\r\n            })\r\n            it(\"should return novel already existed message\", () => {\r\n                const novel = {\r\n                    name: \"Rusty Hotel\",\r\n                    author: \"Rusty\",\r\n                    type: \"Horro\",\r\n                    recommender: \"HP\"\r\n                }\r\n\r\n                return request(server)\r\n                    .post(\"/novels\")\r\n                    .send(novel)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"The novel is already exist\")\r\n                    })\r\n            })\r\n            it(\"should return confirmation message and update mongodb\", () => {\r\n                const novel = {\r\n                    name: \"My Girl\",\r\n                    author: \"Lily\",\r\n                    type: \"Romantic\",\r\n                    recommender: \"HP\"\r\n                }\r\n\r\n                return request(server)\r\n                    .post(\"/novels\")\r\n                    .send(novel)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Novel Successfully added\")\r\n                        validID = res.body.data._id\r\n                    })\r\n            })\r\n            after(() => {\r\n                return request(server)\r\n                    .get(`/novels/${validID}`)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body[0]).to.have.property(\"name\", \"My Girl\")\r\n                        expect(res.body[0]).to.have.property(\"author\", \"Lily\")\r\n                        expect(res.body[0]).to.have.property(\"type\", \"Romantic\")\r\n                        expect(res.body[0]).to.have.property(\"recommender\", \"HP\")\r\n                    })\r\n            })\r\n        })\r\n        describe(\"PUT /novels/:id\", () => {\r\n            describe(\"when the id is valid\", () => {\r\n\r\n                it(\"should return a message and update the grade\", () => {\r\n                    return request(server)\r\n                        .put(`/novels/${validID}`)\r\n                        .send({\"grade\": 4})\r\n                        .expect(200)\r\n                        .then(resp => {\r\n                            expect(resp.body).to.include({\r\n                                message: \"Novel Successfully graded!\"\r\n                            })\r\n                            expect(resp.body.data).to.have.property(\"grade\", 4)\r\n                        })\r\n                })\r\n                after(() => {\r\n                    return request(server)\r\n                        .get(`/novels/${validID}`)\r\n                        .expect(200)\r\n                        .then(resp => {\r\n                            expect(resp.body[0]).to.have.property(\"grade\", 4)\r\n                        })\r\n                })\r\n            })\r\n            describe(\"when the id is invalid\", () => {\r\n                it(\"should return the Novel NOT Found! message\", done => {\r\n                    request(server)\r\n                        .get(\"/novels/1000000020202\")\r\n                        .set(\"Accept\", \"application/json\")\r\n                        .expect(\"Content-Type\", /json/)\r\n                        .expect(200)\r\n                        .end((err, res) => {\r\n                            expect(res.body.message).equals(\"Novel NOT Found!\")\r\n                            done(err)\r\n                        })\r\n                })\r\n            })\r\n        })\r\n        describe(\"DELETE /novels/:id\", () => {\r\n            describe(\"when the id is valid\", () => {\r\n                it(\"should return confirmation message and update database\", () => {\r\n                    request(server)\r\n                        .delete(`novels/${validID}`)\r\n                        .set(\"Accept\", \"application/json\")\r\n                        .expect(\"Content-Type\", /json/)\r\n                        .expect(200)\r\n                        .then(res => {\r\n                            expect(res.body.message).equals(\"Novels Successfully Deleted!\")\r\n                        })\r\n                })\r\n            })\r\n            describe(\"when the id is invalid\", () => {\r\n                it(\"should return the NOT found message\", () => {\r\n                    request(server)\r\n                        .delete(\"/novels/1000000020202\")\r\n                        .set(\"Accept\", \"application/json\")\r\n                        .expect(\"Content-Type\", /json/)\r\n                        .expect(200)\r\n                        .then(res => {\r\n                            expect(res.body.message).equals(\"Novels NOT Found!\")\r\n                        })\r\n                })\r\n            })\r\n        })\r\n    })\r\n    describe(\"User\", () => {\r\n        describe(\"GET /user/:id\", () => {\r\n            describe(\"when the id is valid\", () => {\r\n                it(\"should return the matching user\", done => {\r\n                    request(server)\r\n                        .get(`/user/${validID1}`)\r\n                        .set(\"Accept\", \"application/json\")\r\n                        .expect(\"Content-Type\", /json/)\r\n                        .expect(200)\r\n                        .end((err, res) => {\r\n                            expect(res.body[0]).to.have.property(\"username\", \"Merry\")\r\n                            expect(res.body[0]).to.have.property(\"password\", \"123456\")\r\n                            expect(res.body[0]).to.have.property(\"email\", \"merry@ie\")\r\n                            done(err)\r\n                        })\r\n                })\r\n            })\r\n            describe(\"when the id is invalid\", () => {\r\n                it(\"should return the NOT found message\", done => {\r\n                    request(server)\r\n                        .get(\"/user/10001000000020202\")\r\n                        .set(\"Accept\", \"application/json\")\r\n                        .expect(\"Content-Type\", /json/)\r\n                        .expect(200)\r\n                        .end((err, res) => {\r\n                            expect(res.body.message).equals(\"User NOT Found!\")\r\n                            done(err)\r\n                        })\r\n                })\r\n            })\r\n        })\r\n        describe(\"POST /user\", () => {\r\n            it(\"should return username can not be empty message\", () => {\r\n                const user = {\r\n                    username: \"\",\r\n                    password: \"asdfgh\",\r\n                    email: \"sth@wit\"\r\n                }\r\n                return request(server)\r\n                    .post(\"/user\")\r\n                    .send(user)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"The username can not be empty\")\r\n                    })\r\n            })\r\n            it(\"should return password can not be empty message\", () => {\r\n                const user = {\r\n                    username: \"Justion\",\r\n                    password: \"\",\r\n                    email: \"sth@wit\"\r\n                }\r\n\r\n                return request(server)\r\n                    .post(\"/user\")\r\n                    .send(user)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"The password can not be empty\")\r\n                    })\r\n            })\r\n            it(\"should return email can not be empty message\", () => {\r\n                const user = {\r\n                    username: \"Justin\",\r\n                    password: \"asdfgh\",\r\n                    email: \"\"\r\n                }\r\n\r\n                return request(server)\r\n                    .post(\"/user\")\r\n                    .send(user)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"The email can not be empty\")\r\n                    })\r\n            })\r\n            it(\"should return username occupied message\", () => {\r\n                const user = {\r\n                    username: \"Merry\",\r\n                    password: \"asdfgh\",\r\n                    email: \"sth@wit\"\r\n                }\r\n\r\n                return request(server)\r\n                    .post(\"/user\")\r\n                    .send(user)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"The username is occupied\")\r\n                    })\r\n            })\r\n            it(\"should return confirmation message and update mongodb\", () => {\r\n                const user = {\r\n                    username: \"Justin\",\r\n                    password: \"asdfgh\",\r\n                    email: \"Justinsth@wit\"\r\n                }\r\n\r\n                return request(server)\r\n                    .post(\"/user\")\r\n                    .send(user)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"User Successfully registered\")\r\n                        validID1 = res.body.data._id\r\n                    })\r\n            })\r\n            after(() => {\r\n                return request(server)\r\n                    .get(`/user/${validID1}`)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body[0]).to.have.property(\"username\", \"Justin\")\r\n                        expect(res.body[0]).to.have.property(\"password\", \"asdfgh\")\r\n                        expect(res.body[0]).to.have.property(\"email\", \"Justinsth@wit\")\r\n                    })\r\n            })\r\n        })\r\n        describe(\"POST /user/login\", () => {\r\n            it(\"should return username or password can not be empty message\", () => {\r\n                const user = {\r\n                    username: \"\",\r\n                    password: \"asdfgh\",\r\n                }\r\n\r\n                return request(server)\r\n                    .post(\"/user/login\")\r\n                    .send(user)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"The username or password  can not be empty\")\r\n                    })\r\n            })\r\n            it(\"should return username is not exist message\", () => {\r\n                const user = {\r\n                    username: \"David\",\r\n                    password: \"asdfgh\",\r\n                }\r\n\r\n                return request(server)\r\n                    .post(\"/user/login\")\r\n                    .send(user)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Username is not exist\")\r\n                    })\r\n            })\r\n            it(\"should return wrong password message\", () => {\r\n                const user = {\r\n                    username: \"Merry\",\r\n                    password: \"asdfgh\",\r\n                }\r\n\r\n                return request(server)\r\n                    .post(\"/user/login\")\r\n                    .send(user)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Wrong Password\")\r\n                    })\r\n            })\r\n            it(\"should return confirmation message and update mongodb\", () => {\r\n                const user = {\r\n                    username: \"Merry\",\r\n                    password: \"123456\",\r\n                }\r\n\r\n                return request(server)\r\n                    .post(\"/user/login\")\r\n                    .send(user)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Sign in Successfully\")\r\n                    })\r\n            })\r\n        })\r\n        describe(\"PUT /user/:id\", () => {\r\n            describe(\"when the id is valid\", () => {\r\n                it(\"should return repeated password message\", () => {\r\n                    return request(server)\r\n                        .put(`/user/${validID1}`)\r\n                        .send({\"password\": \"123456\"})\r\n                        .expect(200)\r\n                        .then(resp => {\r\n                            expect(resp.body).to.include({\r\n                                message: \"No change to the Password\"\r\n                            })\r\n                            expect(resp.body.data).to.have.property(\"password\", \"123456\")\r\n                        })\r\n                })\r\n                it(\"should return a message and update the password\", () => {\r\n                    return request(server)\r\n                        .put(`/user/${validID1}`)\r\n                        .send({\"password\": \"123456abc\"})\r\n                        .expect(200)\r\n                        .then(resp => {\r\n                            expect(resp.body).to.include({\r\n                                message: \"Password Successfully changed!\"\r\n                            })\r\n                            expect(resp.body.data).to.have.property(\"password\", \"123456abc\")\r\n                        })\r\n                })\r\n                after(() => {\r\n                    return request(server)\r\n                        .get(`/user/${validID1}`)\r\n                        .expect(200)\r\n                        .then(resp => {\r\n                            expect(resp.body[0]).to.have.property(\"password\", \"123456abc\")\r\n                        })\r\n                })\r\n            })\r\n            describe(\"when the id is invalid\", () => {\r\n                it(\"should return the User NOT Found! message\", done => {\r\n                    request(server)\r\n                        .get(\"/user/1000000020202\")\r\n                        .set(\"Accept\", \"application/json\")\r\n                        .expect(\"Content-Type\", /json/)\r\n                        .expect(200)\r\n                        .end((err, res) => {\r\n                            expect(res.body.message).equals(\"User NOT Found!\")\r\n                            done(err)\r\n                        })\r\n                })\r\n            })\r\n        })\r\n    })\r\n    describe(\"Author\", () => {\r\n        describe(\"GET/author\", () => {\r\n            it(\"should GET all the authors\", done => {\r\n                request(server)\r\n                    .get(\"/author\")\r\n                    .set(\"Accept\", \"application/json\")\r\n                    .expect(\"Content-Type\", /json/)\r\n                    .expect(200)\r\n                    .end((err, res) => {\r\n                        try {\r\n                            expect(res.body).to.be.a(\"array\")\r\n                            expect(res.body.length).to.equal(2)\r\n                            let result = _.map(res.body, author => {\r\n                                return {\r\n                                    name: author.name,\r\n                                    keyword1: author.keyword1,\r\n                                    keyword2: author.keyword2,\r\n                                    numofbooks: author.numofbooks,\r\n                                    numofcollected: author.numofcollected\r\n                                }\r\n                            })\r\n                            expect(result).to.deep.include({\r\n                                name: \"Rusty\",\r\n                                keyword1: \"Horror\",\r\n                                keyword2: \"Science Fiction\",\r\n                                numofbooks: 4,\r\n                                numofcollected: 9\r\n\r\n                            })\r\n                            expect(result).to.deep.include({\r\n                                name: \"White\",\r\n                                keyword1: \"Romantic\",\r\n                                keyword2: \"Science Fiction\",\r\n                                numofbooks: 2,\r\n                                numofcollected: 5\r\n                            })\r\n                            done()\r\n                        } catch (e) {\r\n                            done(e)\r\n                        }\r\n                    })\r\n            })\r\n        })\r\n        describe(\"GET /author/:id\", () => {\r\n            describe(\"when the id is valid\", () => {\r\n                it(\"should return the matching author\", done => {\r\n                    request(server)\r\n                        .get(`/author/${validID2}`)\r\n                        .set(\"Accept\", \"application/json\")\r\n                        .expect(\"Content-Type\", /json/)\r\n                        .expect(200)\r\n                        .end((err, res) => {\r\n                            expect(res.body[0]).to.have.property(\"name\", \"Rusty\")\r\n                            expect(res.body[0]).to.have.property(\"keyword1\", \"Horror\")\r\n                            expect(res.body[0]).to.have.property(\"keyword2\", \"Science Fiction\")\r\n                            expect(res.body[0]).to.have.property(\"numofbooks\", 4)\r\n                            expect(res.body[0]).to.have.property(\"numofcollected\", 9)\r\n                            done(err)\r\n                        })\r\n                })\r\n            })\r\n            describe(\"when the id is invalid\", () => {\r\n                it(\"should return the NOT found message\", done => {\r\n                    request(server)\r\n                        .get(\"/author/100021000000020202\")\r\n                        .set(\"Accept\", \"application/json\")\r\n                        .expect(\"Content-Type\", /json/)\r\n                        .expect(200)\r\n                        .end((err, res) => {\r\n                            expect(res.body.message).equals(\"Author NOT Found!\")\r\n                            done(err)\r\n                        })\r\n                })\r\n            })\r\n        })\r\n        describe(\"POST /author\", () => {\r\n            it(\"should return can not be empty message\", () => {\r\n                const author = {\r\n                    name: \"\",\r\n                    keyword1: \"Horror\",\r\n                    keyword2: \"Science Fiction\",\r\n                    numofbooks: 4,\r\n                }\r\n\r\n                return request(server)\r\n                    .post(\"/author\")\r\n                    .send(author)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"The author name can not be empty\")\r\n                    })\r\n            })\r\n            it(\"should return author already existed message\", () => {\r\n                const author = {\r\n                    name: \"Rusty\",\r\n                    keyword1: \"Horror\",\r\n                    keyword2: \"Science Fiction\",\r\n                    numofbooks: 4,\r\n                }\r\n\r\n                return request(server)\r\n                    .post(\"/author\")\r\n                    .send(author)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"The author is already exist\")\r\n                    })\r\n            })\r\n            it(\"should return confirmation message and update mongodb\", () => {\r\n                const author = {\r\n                    name: \"Ella\",\r\n                    keyword1: \"History\",\r\n                    keyword2: \"Whodunit\",\r\n                    numofbooks: 3,\r\n                }\r\n\r\n                return request(server)\r\n                    .post(\"/author\")\r\n                    .send(author)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Author Successfully added\")\r\n                        validID2 = res.body.data._id\r\n                    })\r\n            })\r\n            after(() => {\r\n                return request(server)\r\n                    .get(`/author/${validID2}`)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body[0]).to.have.property(\"name\", \"Ella\")\r\n                        expect(res.body[0]).to.have.property(\"keyword1\", \"History\")\r\n                        expect(res.body[0]).to.have.property(\"keyword2\", \"Whodunit\")\r\n                        expect(res.body[0]).to.have.property(\"numofbooks\", 3)\r\n                        expect(res.body[0]).to.have.property(\"numofcollected\", 0)\r\n                    })\r\n            })\r\n        })\r\n        describe(\"PUT /author/:id/collect\", () => {\r\n            describe(\"when the id is valid\", () => {\r\n                it(\"should return a message and the author number of collected increased by 1\", () => {\r\n                    return request(server)\r\n                        .put(`/author/${validID2}/collect`)\r\n                        .expect(200)\r\n                        .then(resp => {\r\n                            expect(resp.body).to.include({\r\n                                message: \"Author Successfully collected!\"\r\n                            })\r\n                            expect(resp.body.data).to.have.property(\"numofcollected\", 10)\r\n                        })\r\n                })\r\n                after(() => {\r\n                    return request(server)\r\n                        .get(`/author/${validID2}`)\r\n                        .set(\"Accept\", \"application/json\")\r\n                        .expect(\"Content-Type\", /json/)\r\n                        .expect(200)\r\n                        .then(resp => {\r\n                            expect(resp.body[0]).to.have.property(\"numofcollected\", 10)\r\n                        })\r\n                })\r\n            })\r\n            describe(\"when the id is invalid\", () => {\r\n                it(\"should return a 404 and a message for invalid author id\", () => {\r\n                    return request(server)\r\n                        .put(\"/author/11000100201/collect\")\r\n                        .expect(200)\r\n                        .then(resp => {\r\n                            expect(resp.body).to.include({\r\n                                message: \"Author NOT Found!\"\r\n                            })\r\n                        })\r\n\r\n                })\r\n            })\r\n        })\r\n        describe(\"DELETE /author/:id\", () => {\r\n            describe(\"when the id is valid\", () => {\r\n                it(\"should return confirmation message\", () => {\r\n                    request(server)\r\n                        .delete(`/author/${validID2}`)\r\n                        .set(\"Accept\", \"application/json\")\r\n                        .expect(\"Content-Type\", /json/)\r\n                        .expect(200)\r\n                        .then(resp => {\r\n                            expect(resp.body).to.include({\r\n                                message: \"Author Successfully Deleted!\"\r\n                            })\r\n                        })\r\n                })\r\n            })\r\n            describe(\"when the id is invalid\", () => {\r\n                it(\"should return NOT found message\", () => {\r\n                    request(server)\r\n                        .delete(\"/author/12001020100101\")\r\n                        .set(\"Accept\", \"application/json\")\r\n                        .expect(\"Content-Type\", /json/)\r\n                        .expect(200)\r\n                        .then(resp => {\r\n                            expect(resp.body).to.include({\r\n                                message: \"Author NOT Found!\"\r\n                            })\r\n                        })\r\n                })\r\n            })\r\n        })\r\n    })\r\n})\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572900815776
  },
  "{\"sourceRoot\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\models\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"filename\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\models\\\\novels.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test/api/novelTest.js \",\"root\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"plugins\":[],\"presets\":[]}:7.6.4:test/api/novelTest.js ": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models\\novels.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test/api/novelTest.js ",
      "root": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models\\novels.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models\\novels.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models",
        "sourceFileName": "novels.js"
      }
    },
    "ast": null,
    "code": "let mongoose = require('mongoose');\n\nlet NovelSchema = new mongoose.Schema({\n  name: String,\n  author: String,\n  type: String,\n  recommender: String,\n  grade: {\n    type: Number,\n    default: 0\n  }\n}, {\n  collection: 'novels'\n});\nmodule.exports = mongoose.model('Novel', NovelSchema);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vdmVscy5qcyJdLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJOb3ZlbFNjaGVtYSIsIlNjaGVtYSIsIm5hbWUiLCJTdHJpbmciLCJhdXRob3IiLCJ0eXBlIiwicmVjb21tZW5kZXIiLCJncmFkZSIsIk51bWJlciIsImRlZmF1bHQiLCJjb2xsZWN0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1vZGVsIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUVBLElBQUlDLFdBQVcsR0FBRyxJQUFJRixRQUFRLENBQUNHLE1BQWIsQ0FBb0I7QUFDOUJDLEVBQUFBLElBQUksRUFBRUMsTUFEd0I7QUFFOUJDLEVBQUFBLE1BQU0sRUFBRUQsTUFGc0I7QUFHOUJFLEVBQUFBLElBQUksRUFBRUYsTUFId0I7QUFJOUJHLEVBQUFBLFdBQVcsRUFBRUgsTUFKaUI7QUFLOUJJLEVBQUFBLEtBQUssRUFBQztBQUFDRixJQUFBQSxJQUFJLEVBQUVHLE1BQVA7QUFBZUMsSUFBQUEsT0FBTyxFQUFFO0FBQXhCO0FBTHdCLENBQXBCLEVBUWQ7QUFBRUMsRUFBQUEsVUFBVSxFQUFFO0FBQWQsQ0FSYyxDQUFsQjtBQVVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJkLFFBQVEsQ0FBQ2UsS0FBVCxDQUFlLE9BQWYsRUFBd0JiLFdBQXhCLENBQWpCIiwic291cmNlUm9vdCI6IkU6XFx4dWV5aVxcMjAyMO+8iDHvvIlcXEFTXFxOb3ZlbElkZWFzLW1hc3RlclxcTm92ZWxJZGVhcy1tYXN0ZXJcXG1vZGVscyIsInNvdXJjZXNDb250ZW50IjpbImxldCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5cbmxldCBOb3ZlbFNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xuICAgICAgICBuYW1lOiBTdHJpbmcsXG4gICAgICAgIGF1dGhvcjogU3RyaW5nLFxuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHJlY29tbWVuZGVyOiBTdHJpbmcsXG4gICAgICAgIGdyYWRlOnt0eXBlOiBOdW1iZXIsIGRlZmF1bHQ6IDB9XG5cbiAgICB9LFxuICAgIHsgY29sbGVjdGlvbjogJ25vdmVscycgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbW9uZ29vc2UubW9kZWwoJ05vdmVsJywgTm92ZWxTY2hlbWEpOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "novels.js"
      ],
      "names": [
        "mongoose",
        "require",
        "NovelSchema",
        "Schema",
        "name",
        "String",
        "author",
        "type",
        "recommender",
        "grade",
        "Number",
        "default",
        "collection",
        "module",
        "exports",
        "model"
      ],
      "mappings": "AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAIC,WAAW,GAAG,IAAIF,QAAQ,CAACG,MAAb,CAAoB;AAC9BC,EAAAA,IAAI,EAAEC,MADwB;AAE9BC,EAAAA,MAAM,EAAED,MAFsB;AAG9BE,EAAAA,IAAI,EAAEF,MAHwB;AAI9BG,EAAAA,WAAW,EAAEH,MAJiB;AAK9BI,EAAAA,KAAK,EAAC;AAACF,IAAAA,IAAI,EAAEG,MAAP;AAAeC,IAAAA,OAAO,EAAE;AAAxB;AALwB,CAApB,EAQd;AAAEC,EAAAA,UAAU,EAAE;AAAd,CARc,CAAlB;AAUAC,MAAM,CAACC,OAAP,GAAiBd,QAAQ,CAACe,KAAT,CAAe,OAAf,EAAwBb,WAAxB,CAAjB",
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models",
      "sourcesContent": [
        "let mongoose = require('mongoose');\n\nlet NovelSchema = new mongoose.Schema({\n        name: String,\n        author: String,\n        type: String,\n        recommender: String,\n        grade:{type: Number, default: 0}\n\n    },\n    { collection: 'novels' });\n\nmodule.exports = mongoose.model('Novel', NovelSchema);"
      ]
    },
    "sourceType": "module",
    "mtime": 1572889504000
  },
  "{\"sourceRoot\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\models\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"filename\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\models\\\\user.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test/api/novelTest.js \",\"root\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"plugins\":[],\"presets\":[]}:7.6.4:test/api/novelTest.js ": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models\\user.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test/api/novelTest.js ",
      "root": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models\\user.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models\\user.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models",
        "sourceFileName": "user.js"
      }
    },
    "ast": null,
    "code": "let mongoose = require('mongoose');\n\nlet UserSchema = new mongoose.Schema({\n  username: String,\n  password: String,\n  email: String\n}, {\n  collection: 'user'\n});\nmodule.exports = mongoose.model('User', UserSchema);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXIuanMiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJyZXF1aXJlIiwiVXNlclNjaGVtYSIsIlNjaGVtYSIsInVzZXJuYW1lIiwiU3RyaW5nIiwicGFzc3dvcmQiLCJlbWFpbCIsImNvbGxlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwibW9kZWwiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBRUEsSUFBSUMsVUFBVSxHQUFHLElBQUlGLFFBQVEsQ0FBQ0csTUFBYixDQUFvQjtBQUM3QkMsRUFBQUEsUUFBUSxFQUFFQyxNQURtQjtBQUU3QkMsRUFBQUEsUUFBUSxFQUFFRCxNQUZtQjtBQUc3QkUsRUFBQUEsS0FBSyxFQUFFRjtBQUhzQixDQUFwQixFQUtiO0FBQUVHLEVBQUFBLFVBQVUsRUFBRTtBQUFkLENBTGEsQ0FBakI7QUFPQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCVixRQUFRLENBQUNXLEtBQVQsQ0FBZSxNQUFmLEVBQXVCVCxVQUF2QixDQUFqQiIsInNvdXJjZVJvb3QiOiJFOlxceHVleWlcXDIwMjDvvIgx77yJXFxBU1xcTm92ZWxJZGVhcy1tYXN0ZXJcXE5vdmVsSWRlYXMtbWFzdGVyXFxtb2RlbHMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xuXG5sZXQgVXNlclNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xuICAgICAgICB1c2VybmFtZTogU3RyaW5nLFxuICAgICAgICBwYXNzd29yZDogU3RyaW5nLFxuICAgICAgICBlbWFpbDogU3RyaW5nXG4gICAgfSxcbiAgICB7IGNvbGxlY3Rpb246ICd1c2VyJyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBtb25nb29zZS5tb2RlbCgnVXNlcicsIFVzZXJTY2hlbWEpOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "user.js"
      ],
      "names": [
        "mongoose",
        "require",
        "UserSchema",
        "Schema",
        "username",
        "String",
        "password",
        "email",
        "collection",
        "module",
        "exports",
        "model"
      ],
      "mappings": "AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAIC,UAAU,GAAG,IAAIF,QAAQ,CAACG,MAAb,CAAoB;AAC7BC,EAAAA,QAAQ,EAAEC,MADmB;AAE7BC,EAAAA,QAAQ,EAAED,MAFmB;AAG7BE,EAAAA,KAAK,EAAEF;AAHsB,CAApB,EAKb;AAAEG,EAAAA,UAAU,EAAE;AAAd,CALa,CAAjB;AAOAC,MAAM,CAACC,OAAP,GAAiBV,QAAQ,CAACW,KAAT,CAAe,MAAf,EAAuBT,UAAvB,CAAjB",
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models",
      "sourcesContent": [
        "let mongoose = require('mongoose');\n\nlet UserSchema = new mongoose.Schema({\n        username: String,\n        password: String,\n        email: String\n    },\n    { collection: 'user' });\n\nmodule.exports = mongoose.model('User', UserSchema);"
      ]
    },
    "sourceType": "module",
    "mtime": 1572889504000
  },
  "{\"sourceRoot\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\models\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"filename\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\models\\\\author.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test/api/novelTest.js \",\"root\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"plugins\":[],\"presets\":[]}:7.6.4:test/api/novelTest.js ": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models\\author.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test/api/novelTest.js ",
      "root": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models\\author.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models\\author.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models",
        "sourceFileName": "author.js"
      }
    },
    "ast": null,
    "code": "let mongoose = require('mongoose');\n\nlet AuthorSchema = new mongoose.Schema({\n  name: String,\n  keyword1: String,\n  keyword2: String,\n  numofbooks: Number,\n  numofcollected: {\n    type: Number,\n    default: 0\n  }\n}, {\n  collection: 'author'\n});\nmodule.exports = mongoose.model('Author', AuthorSchema);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGhvci5qcyJdLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJBdXRob3JTY2hlbWEiLCJTY2hlbWEiLCJuYW1lIiwiU3RyaW5nIiwia2V5d29yZDEiLCJrZXl3b3JkMiIsIm51bW9mYm9va3MiLCJOdW1iZXIiLCJudW1vZmNvbGxlY3RlZCIsInR5cGUiLCJkZWZhdWx0IiwiY29sbGVjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2RlbCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFFQSxJQUFJQyxZQUFZLEdBQUcsSUFBSUYsUUFBUSxDQUFDRyxNQUFiLENBQW9CO0FBQy9CQyxFQUFBQSxJQUFJLEVBQUVDLE1BRHlCO0FBRS9CQyxFQUFBQSxRQUFRLEVBQUVELE1BRnFCO0FBRy9CRSxFQUFBQSxRQUFRLEVBQUVGLE1BSHFCO0FBSS9CRyxFQUFBQSxVQUFVLEVBQUVDLE1BSm1CO0FBSy9CQyxFQUFBQSxjQUFjLEVBQUM7QUFBQ0MsSUFBQUEsSUFBSSxFQUFFRixNQUFQO0FBQWVHLElBQUFBLE9BQU8sRUFBRTtBQUF4QjtBQUxnQixDQUFwQixFQVFmO0FBQUVDLEVBQUFBLFVBQVUsRUFBRTtBQUFkLENBUmUsQ0FBbkI7QUFVQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCZixRQUFRLENBQUNnQixLQUFULENBQWUsUUFBZixFQUF5QmQsWUFBekIsQ0FBakIiLCJzb3VyY2VSb290IjoiRTpcXHh1ZXlpXFwyMDIw77yIMe+8iVxcQVNcXE5vdmVsSWRlYXMtbWFzdGVyXFxOb3ZlbElkZWFzLW1hc3RlclxcbW9kZWxzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcblxubGV0IEF1dGhvclNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xuICAgICAgICBuYW1lOiBTdHJpbmcsXG4gICAgICAgIGtleXdvcmQxOiBTdHJpbmcsXG4gICAgICAgIGtleXdvcmQyOiBTdHJpbmcsXG4gICAgICAgIG51bW9mYm9va3M6IE51bWJlcixcbiAgICAgICAgbnVtb2Zjb2xsZWN0ZWQ6e3R5cGU6IE51bWJlciwgZGVmYXVsdDogMH1cblxuICAgIH0sXG4gICAgeyBjb2xsZWN0aW9uOiAnYXV0aG9yJyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBtb25nb29zZS5tb2RlbCgnQXV0aG9yJywgQXV0aG9yU2NoZW1hKTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "author.js"
      ],
      "names": [
        "mongoose",
        "require",
        "AuthorSchema",
        "Schema",
        "name",
        "String",
        "keyword1",
        "keyword2",
        "numofbooks",
        "Number",
        "numofcollected",
        "type",
        "default",
        "collection",
        "module",
        "exports",
        "model"
      ],
      "mappings": "AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAIC,YAAY,GAAG,IAAIF,QAAQ,CAACG,MAAb,CAAoB;AAC/BC,EAAAA,IAAI,EAAEC,MADyB;AAE/BC,EAAAA,QAAQ,EAAED,MAFqB;AAG/BE,EAAAA,QAAQ,EAAEF,MAHqB;AAI/BG,EAAAA,UAAU,EAAEC,MAJmB;AAK/BC,EAAAA,cAAc,EAAC;AAACC,IAAAA,IAAI,EAAEF,MAAP;AAAeG,IAAAA,OAAO,EAAE;AAAxB;AALgB,CAApB,EAQf;AAAEC,EAAAA,UAAU,EAAE;AAAd,CARe,CAAnB;AAUAC,MAAM,CAACC,OAAP,GAAiBf,QAAQ,CAACgB,KAAT,CAAe,QAAf,EAAyBd,YAAzB,CAAjB",
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\models",
      "sourcesContent": [
        "let mongoose = require('mongoose');\n\nlet AuthorSchema = new mongoose.Schema({\n        name: String,\n        keyword1: String,\n        keyword2: String,\n        numofbooks: Number,\n        numofcollected:{type: Number, default: 0}\n\n    },\n    { collection: 'author' });\n\nmodule.exports = mongoose.model('Author', AuthorSchema);"
      ]
    },
    "sourceType": "module",
    "mtime": 1572889504000
  },
  "{\"sourceRoot\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"filename\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\app.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test/api/novelTest.js \",\"root\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"plugins\":[],\"presets\":[]}:7.6.4:test/api/novelTest.js ": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\app.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test/api/novelTest.js ",
      "root": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\app.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\app.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
        "sourceFileName": "app.js"
      }
    },
    "ast": null,
    "code": "var createError = require('http-errors');\n\nvar express = require('express');\n\nvar path = require('path');\n\nvar cookieParser = require('cookie-parser');\n\nvar logger = require('morgan');\n\nvar indexRouter = require('./routes/index');\n\nvar usersRouter = require('./routes/users');\n\nconst novels = require(\"./routes/novels\");\n\nconst author = require(\"./routes/author\");\n\nconst user = require(\"./routes/user\");\n\nvar app = express(); // view engine setup\n\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: false\n}));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\napp.get('/user/:id', user.userInfo);\napp.post('/user', user.register);\napp.post('/user/login', user.login);\napp.put('/user/:id', user.editPassword);\napp.get('/novels', novels.findAll);\napp.get('/novels/:id', novels.findOne);\napp.post('/novels', novels.addNovel);\napp.put('/novels/:id', novels.giveGrade);\napp.delete('/novels/:id', novels.deleteNovel);\napp.get('/author', author.findAll);\napp.get('/author/:id', author.findOne);\napp.post('/author', author.addAuthor);\napp.put('/author/:id/collect', author.collectAuthor);\napp.delete('/author/:id', author.removeCollection);\napp.use(function (req, res, next) {\n  next(createError(404));\n}); // error handler\n\napp.use(function (err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {}; // render the error page\n\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nif (process.env.NODE_ENV !== 'test') {\n  app.use(logger('dev'));\n}\n\nmodule.exports = app;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJjcmVhdGVFcnJvciIsInJlcXVpcmUiLCJleHByZXNzIiwicGF0aCIsImNvb2tpZVBhcnNlciIsImxvZ2dlciIsImluZGV4Um91dGVyIiwidXNlcnNSb3V0ZXIiLCJub3ZlbHMiLCJhdXRob3IiLCJ1c2VyIiwiYXBwIiwic2V0Iiwiam9pbiIsIl9fZGlybmFtZSIsInVzZSIsImpzb24iLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJzdGF0aWMiLCJnZXQiLCJ1c2VySW5mbyIsInBvc3QiLCJyZWdpc3RlciIsImxvZ2luIiwicHV0IiwiZWRpdFBhc3N3b3JkIiwiZmluZEFsbCIsImZpbmRPbmUiLCJhZGROb3ZlbCIsImdpdmVHcmFkZSIsImRlbGV0ZSIsImRlbGV0ZU5vdmVsIiwiYWRkQXV0aG9yIiwiY29sbGVjdEF1dGhvciIsInJlbW92ZUNvbGxlY3Rpb24iLCJyZXEiLCJyZXMiLCJuZXh0IiwiZXJyIiwibG9jYWxzIiwibWVzc2FnZSIsImVycm9yIiwic3RhdHVzIiwicmVuZGVyIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsV0FBVyxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUF6Qjs7QUFDQSxJQUFJQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUNBLElBQUlFLElBQUksR0FBR0YsT0FBTyxDQUFDLE1BQUQsQ0FBbEI7O0FBQ0EsSUFBSUcsWUFBWSxHQUFHSCxPQUFPLENBQUMsZUFBRCxDQUExQjs7QUFDQSxJQUFJSSxNQUFNLEdBQUdKLE9BQU8sQ0FBQyxRQUFELENBQXBCOztBQUVBLElBQUlLLFdBQVcsR0FBR0wsT0FBTyxDQUFDLGdCQUFELENBQXpCOztBQUNBLElBQUlNLFdBQVcsR0FBR04sT0FBTyxDQUFDLGdCQUFELENBQXpCOztBQUVBLE1BQU1PLE1BQU0sR0FBR1AsT0FBTyxDQUFDLGlCQUFELENBQXRCOztB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QUFXRSxLQUFYLEdBQW1CTixHQUFHLENBQUN6QixHQUFKLENBQVFTLEdBQVIsQ0FBWSxLQUFaLE1BQXVCLGFBQXZCLEdBQXVDbUIsR0FBdkMsR0FBNkMsRUFBaEUsQ0FIb0MsQ0FLcEM7O0FBQ0FGLEVBQUFBLEdBQUcsQ0FBQ00sTUFBSixDQUFXSixHQUFHLENBQUNJLE1BQUosSUFBYyxHQUF6QjtBQUNBTixFQUFBQSxHQUFHLENBQUNPLE1BQUosQ0FBVyxPQUFYO0FBQ0QsQ0FSRDs7QUFTQSxJQUFJQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixNQUE3QixFQUFxQztBQUNuQ3BDLEVBQUFBLEdBQUcsQ0FBQ0ksR0FBSixDQUFRVixNQUFNLENBQUMsS0FBRCxDQUFkO0FBQ0Q7O0FBQ0QyQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJ0QyxHQUFqQiIsInNvdXJjZVJvb3QiOiJFOlxceHVleWlcXDIwMjDvvIgx77yJXFxBU1xcTm92ZWxJZGVhcy1tYXN0ZXJcXE5vdmVsSWRlYXMtbWFzdGVyIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnaHR0cC1lcnJvcnMnKTtcbnZhciBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgY29va2llUGFyc2VyID0gcmVxdWlyZSgnY29va2llLXBhcnNlcicpO1xudmFyIGxvZ2dlciA9IHJlcXVpcmUoJ21vcmdhbicpO1xuXG52YXIgaW5kZXhSb3V0ZXIgPSByZXF1aXJlKCcuL3JvdXRlcy9pbmRleCcpO1xudmFyIHVzZXJzUm91dGVyID0gcmVxdWlyZSgnLi9yb3V0ZXMvdXNlcnMnKTtcblxuY29uc3Qgbm92ZWxzID0gcmVxdWlyZShcIi4vcm91dGVzL25vdmVsc1wiKTtcbmNvbnN0IGF1dGhvciA9IHJlcXVpcmUoXCIuL3JvdXRlcy9hdXRob3JcIik7XG5jb25zdCB1c2VyID0gcmVxdWlyZShcIi4vcm91dGVzL3VzZXJcIik7XG52YXIgYXBwID0gZXhwcmVzcygpO1xuXG4vLyB2aWV3IGVuZ2luZSBzZXR1cFxuYXBwLnNldCgndmlld3MnLCBwYXRoLmpvaW4oX19kaXJuYW1lLCAndmlld3MnKSk7XG5hcHAuc2V0KCd2aWV3IGVuZ2luZScsICdlanMnKTtcblxuYXBwLnVzZShsb2dnZXIoJ2RldicpKTtcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xuYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xuYXBwLnVzZShjb29raWVQYXJzZXIoKSk7XG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsICdwdWJsaWMnKSkpO1xuXG5hcHAudXNlKCcvJywgaW5kZXhSb3V0ZXIpO1xuYXBwLnVzZSgnL3VzZXJzJywgdXNlcnNSb3V0ZXIpO1xuXG5hcHAuZ2V0KCcvdXNlci86aWQnLCB1c2VyLnVzZXJJbmZvKTtcbmFwcC5wb3N0KCcvdXNlcicsdXNlci5yZWdpc3Rlcik7XG5hcHAucG9zdCgnL3VzZXIvbG9naW4nLHVzZXIubG9naW4pO1xuYXBwLnB1dCgnL3VzZXIvOmlkJywgdXNlci5lZGl0UGFzc3dvcmQpO1xuXG5hcHAuZ2V0KCcvbm92ZWxzJywgbm92ZWxzLmZpbmRBbGwpO1xuYXBwLmdldCgnL25vdmVscy86aWQnLCBub3ZlbHMuZmluZE9uZSk7XG5hcHAucG9zdCgnL25vdmVscycsbm92ZWxzLmFkZE5vdmVsKTtcbmFwcC5wdXQoJy9ub3ZlbHMvOmlkJywgbm92ZWxzLmdpdmVHcmFkZSk7XG5hcHAuZGVsZXRlKCcvbm92ZWxzLzppZCcsIG5vdmVscy5kZWxldGVOb3ZlbCk7XG5cbmFwcC5nZXQoJy9hdXRob3InLCBhdXRob3IuZmluZEFsbCk7XG5hcHAuZ2V0KCcvYXV0aG9yLzppZCcsIGF1dGhvci5maW5kT25lKTtcbmFwcC5wb3N0KCcvYXV0aG9yJywgYXV0aG9yLmFkZEF1dGhvcik7XG5hcHAucHV0KCcvYXV0aG9yLzppZC9jb2xsZWN0JywgYXV0aG9yLmNvbGxlY3RBdXRob3IpO1xuYXBwLmRlbGV0ZSgnL2F1dGhvci86aWQnLCBhdXRob3IucmVtb3ZlQ29sbGVjdGlvbik7XG5cbmFwcC51c2UoZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgbmV4dChjcmVhdGVFcnJvcig0MDQpKTtcbn0pO1xuXG4vLyBlcnJvciBoYW5kbGVyXG5hcHAudXNlKGZ1bmN0aW9uKGVyciwgcmVxLCByZXMsIG5leHQpIHtcbiAgLy8gc2V0IGxvY2Fscywgb25seSBwcm92aWRpbmcgZXJyb3IgaW4gZGV2ZWxvcG1lbnRcbiAgcmVzLmxvY2Fscy5tZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG4gIHJlcy5sb2NhbHMuZXJyb3IgPSByZXEuYXBwLmdldCgnZW52JykgPT09ICdkZXZlbG9wbWVudCcgPyBlcnIgOiB7fTtcblxuICAvLyByZW5kZXIgdGhlIGVycm9yIHBhZ2VcbiAgcmVzLnN0YXR1cyhlcnIuc3RhdHVzIHx8IDUwMCk7XG4gIHJlcy5yZW5kZXIoJ2Vycm9yJyk7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnKSB7XG4gIGFwcC51c2UobG9nZ2VyKCdkZXYnKSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGFwcDtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "app.js"
      ],
      "names": [
        "createError",
        "require",
        "express",
        "path",
        "cookieParser",
        "logger",
        "indexRouter",
        "usersRouter",
        "novels",
        "author",
        "user",
        "app",
        "set",
        "join",
        "__dirname",
        "use",
        "json",
        "urlencoded",
        "extended",
        "static",
        "get",
        "userInfo",
        "post",
        "register",
        "login",
        "put",
        "editPassword",
        "findAll",
        "findOne",
        "addNovel",
        "giveGrade",
        "delete",
        "deleteNovel",
        "addAuthor",
        "collectAuthor",
        "removeCollection",
        "req",
        "res",
        "next",
        "err",
        "locals",
        "message",
        "error",
        "status",
        "render",
        "process",
        "env",
        "NODE_ENV",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "sourcesContent": [
        "var createError = require('http-errors');\nvar express = require('express');\nvar path = require('path');\nvar cookieParser = require('cookie-parser');\nvar logger = require('morgan');\n\nvar indexRouter = require('./routes/index');\nvar usersRouter = require('./routes/users');\n\nconst novels = require(\"./routes/novels\");\nconst author = require(\"./routes/author\");\nconst user = require(\"./routes/user\");\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\n\napp.get('/user/:id', user.userInfo);\napp.post('/user',user.register);\napp.post('/user/login',user.login);\napp.put('/user/:id', user.editPassword);\n\napp.get('/novels', novels.findAll);\napp.get('/novels/:id', novels.findOne);\napp.post('/novels',novels.addNovel);\napp.put('/novels/:id', novels.giveGrade);\napp.delete('/novels/:id', novels.deleteNovel);\n\napp.get('/author', author.findAll);\napp.get('/author/:id', author.findOne);\napp.post('/author', author.addAuthor);\napp.put('/author/:id/collect', author.collectAuthor);\napp.delete('/author/:id', author.removeCollection);\n\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\nif (process.env.NODE_ENV !== 'test') {\n  app.use(logger('dev'));\n}\nmodule.exports = app;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572897039658
  },
  "{\"sourceRoot\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"filename\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\routes\\\\index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test/api/novelTest.js \",\"root\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"plugins\":[],\"presets\":[]}:7.6.4:test/api/novelTest.js ": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test/api/novelTest.js ",
      "root": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "var express = require(\"express\");\n\nvar router = express.Router();\n/* GET home page. */\n\nrouter.get(\"/\", function (req, res) {\n  res.render(\"index\", {\n    title: \"welcome to Novel ideals\"\n  });\n});\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJyZXF1aXJlIiwicm91dGVyIiwiUm91dGVyIiwiZ2V0IiwicmVxIiwicmVzIiwicmVuZGVyIiwidGl0bGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUNBLElBQUlDLE1BQU0sR0FBR0YsT0FBTyxDQUFDRyxNQUFSLEVBQWI7QUFFQTs7QUFDQUQsTUFBTSxDQUFDRSxHQUFQLENBQVcsR0FBWCxFQUFnQixVQUFTQyxHQUFULEVBQWNDLEdBQWQsRUFBbUI7QUFDL0JBLEVBQUFBLEdBQUcsQ0FBQ0MsTUFBSixDQUFXLE9BQVgsRUFBb0I7QUFBRUMsSUFBQUEsS0FBSyxFQUFFO0FBQVQsR0FBcEI7QUFDSCxDQUZEO0FBSUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlIsTUFBakIiLCJzb3VyY2VSb290IjoiRTpcXHh1ZXlpXFwyMDIw77yIMe+8iVxcQVNcXE5vdmVsSWRlYXMtbWFzdGVyXFxOb3ZlbElkZWFzLW1hc3Rlclxccm91dGVzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKVxyXG52YXIgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKVxyXG5cclxuLyogR0VUIGhvbWUgcGFnZS4gKi9cclxucm91dGVyLmdldChcIi9cIiwgZnVuY3Rpb24ocmVxLCByZXMpIHtcclxuICAgIHJlcy5yZW5kZXIoXCJpbmRleFwiLCB7IHRpdGxlOiBcIndlbGNvbWUgdG8gTm92ZWwgaWRlYWxzXCIgfSlcclxufSlcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcm91dGVyXHJcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "express",
        "require",
        "router",
        "Router",
        "get",
        "req",
        "res",
        "render",
        "title",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAb;AAEA;;AACAD,MAAM,CAACE,GAAP,CAAW,GAAX,EAAgB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAC/BA,EAAAA,GAAG,CAACC,MAAJ,CAAW,OAAX,EAAoB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAApB;AACH,CAFD;AAIAC,MAAM,CAACC,OAAP,GAAiBR,MAAjB",
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
      "sourcesContent": [
        "var express = require(\"express\")\r\nvar router = express.Router()\r\n\r\n/* GET home page. */\r\nrouter.get(\"/\", function(req, res) {\r\n    res.render(\"index\", { title: \"welcome to Novel ideals\" })\r\n})\r\n\r\nmodule.exports = router\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572897896916
  },
  "{\"sourceRoot\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"filename\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\routes\\\\users.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test/api/novelTest.js \",\"root\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"plugins\":[],\"presets\":[]}:7.6.4:test/api/novelTest.js ": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\users.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test/api/novelTest.js ",
      "root": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\users.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\users.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
        "sourceFileName": "users.js"
      }
    },
    "ast": null,
    "code": "var express = require(\"express\");\n\nvar router = express.Router();\n/* GET users listing. */\n\nrouter.get(\"/\", function (req, res) {\n  res.send(\"respond with a resource\");\n});\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJzLmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJyZXF1aXJlIiwicm91dGVyIiwiUm91dGVyIiwiZ2V0IiwicmVxIiwicmVzIiwic2VuZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBckI7O0FBQ0EsSUFBSUMsTUFBTSxHQUFHRixPQUFPLENBQUNHLE1BQVIsRUFBYjtBQUVBOztBQUNBRCxNQUFNLENBQUNFLEdBQVAsQ0FBVyxHQUFYLEVBQWdCLFVBQVNDLEdBQVQsRUFBY0MsR0FBZCxFQUFtQjtBQUMvQkEsRUFBQUEsR0FBRyxDQUFDQyxJQUFKLENBQVMseUJBQVQ7QUFDSCxDQUZEO0FBSUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlAsTUFBakIiLCJzb3VyY2VSb290IjoiRTpcXHh1ZXlpXFwyMDIw77yIMe+8iVxcQVNcXE5vdmVsSWRlYXMtbWFzdGVyXFxOb3ZlbElkZWFzLW1hc3Rlclxccm91dGVzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKVxyXG52YXIgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKVxyXG5cclxuLyogR0VUIHVzZXJzIGxpc3RpbmcuICovXHJcbnJvdXRlci5nZXQoXCIvXCIsIGZ1bmN0aW9uKHJlcSwgcmVzKSB7XHJcbiAgICByZXMuc2VuZChcInJlc3BvbmQgd2l0aCBhIHJlc291cmNlXCIpXHJcbn0pXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlclxyXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "users.js"
      ],
      "names": [
        "express",
        "require",
        "router",
        "Router",
        "get",
        "req",
        "res",
        "send",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAb;AAEA;;AACAD,MAAM,CAACE,GAAP,CAAW,GAAX,EAAgB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAC/BA,EAAAA,GAAG,CAACC,IAAJ,CAAS,yBAAT;AACH,CAFD;AAIAC,MAAM,CAACC,OAAP,GAAiBP,MAAjB",
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
      "sourcesContent": [
        "var express = require(\"express\")\r\nvar router = express.Router()\r\n\r\n/* GET users listing. */\r\nrouter.get(\"/\", function(req, res) {\r\n    res.send(\"respond with a resource\")\r\n})\r\n\r\nmodule.exports = router\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572897896955
  },
  "{\"sourceRoot\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"filename\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\routes\\\\novels.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test/api/novelTest.js \",\"root\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"plugins\":[],\"presets\":[]}:7.6.4:test/api/novelTest.js ": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\novels.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test/api/novelTest.js ",
      "root": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\novels.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\novels.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
        "sourceFileName": "novels.js"
      }
    },
    "ast": null,
    "code": "let Novel = require(\"../models/novels\");\n\nlet express = require(\"express\");\n\nlet router = express.Router();\n\nrouter.findAll = (req, res) => {\n  // Return a JSON representation of our list\n  res.setHeader(\"Content-Type\", \"application/json\");\n  Novel.find(function (err, novels) {\n    if (err) res.send(err);\n    res.send(JSON.stringify(novels, null, 10));\n  });\n};\n\nrouter.findOne = (req, res) => {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  Novel.find({\n    \"_id\": req.params.id\n  }, function (err, novel) {\n    if (err) res.json({\n      message: \"Novel NOT Found!\",\n      errmsg: err\n    });else res.send(JSON.stringify(novel, null, 10));\n  });\n};\n\nrouter.addNovel = (req, res) => {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  var name = req.body.name;\n  var author = req.body.author;\n  var type = req.body.type;\n  var recommender = req.body.recommender;\n\n  if (name == \"\") {\n    res.json({\n      message: \"The novel name can not be empty\"\n    });\n    return;\n  }\n\n  Novel.findOne({\n    name: name\n  }, function (err, info) {\n    if (info) {\n      res.json({\n        message: \"The novel is already exist\",\n        errmsg: err\n      });\n      return;\n    }\n\n    var novel = new Novel({\n      name: name,\n      author: author,\n      type: type,\n      recommender: recommender\n    });\n    novel.save(function (err) {\n      if (err) res.json({\n        message: \"Novel not added\",\n        errmsg: err\n      });else res.json({\n        message: \"Novel Successfully added\",\n        data: novel\n      });\n    });\n  });\n};\n\nrouter.giveGrade = (req, res) => {\n  Novel.findById(req.params.id, function (err, novel) {\n    if (err) res.json({\n      message: \"Novel NOT Found!\",\n      errmsg: err\n    });else {\n      novel.grade = req.body.grade;\n      novel.save(function (err) {\n        if (err) res.json({\n          message: \"Novel NOT graded!\",\n          errmsg: err\n        });else res.json({\n          message: \"Novel Successfully graded!\",\n          data: novel\n        });\n      });\n    }\n  });\n};\n\nrouter.deleteNovel = (req, res) => {\n  Novel.findByIdAndRemove(req.params.id, function (err) {\n    if (err) res.json({\n      message: \"Novels NOT Found!\",\n      errmsg: err\n    });else res.json({\n      message: \"Novels Successfully Deleted!\",\n      data: Novel\n    });\n  });\n};\n\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "novels.js"
      ],
      "names": [
        "Novel",
        "require",
        "express",
        "router",
        "Router",
        "findAll",
        "req",
        "res",
        "setHeader",
        "find",
        "err",
        "novels",
        "send",
        "JSON",
        "stringify",
        "findOne",
        "params",
        "id",
        "novel",
        "json",
        "message",
        "errmsg",
        "addNovel",
        "name",
        "body",
        "author",
        "type",
        "recommender",
        "info",
        "save",
        "data",
        "giveGrade",
        "findById",
        "grade",
        "deleteNovel",
        "findByIdAndRemove",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
      "sourcesContent": [
        "let Novel = require(\"../models/novels\")\r\nlet express = require(\"express\")\r\nlet router = express.Router()\r\n\r\nrouter.findAll = (req, res) => {\r\n    // Return a JSON representation of our list\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    Novel.find(function(err, novels) {\r\n        if (err)\r\n            res.send(err)\r\n\r\n        res.send(JSON.stringify(novels,null,10))\r\n    })\r\n}\r\n\r\nrouter.findOne = (req, res) => {\r\n\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    Novel.find({ \"_id\" : req.params.id },function(err, novel) {\r\n        if (err)\r\n            res.json({ message: \"Novel NOT Found!\", errmsg : err } )\r\n        else\r\n            res.send(JSON.stringify(novel,null,10))\r\n    })\r\n\r\n}\r\n\r\nrouter.addNovel = (req, res) => {\r\n\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    var name = req.body.name\r\n    var author = req.body.author\r\n    var type = req.body.type\r\n    var recommender = req.body.recommender\r\n\r\n    if( name == \"\"){\r\n        res.json({ message: \"The novel name can not be empty\"} )\r\n        return\r\n    }\r\n\r\n    Novel.findOne({\r\n        name:name\r\n    },function (err, info) {\r\n        if(info){\r\n            res.json({ message: \"The novel is already exist\",errmsg : err} )\r\n            return\r\n        }\r\n        var novel = new Novel({\r\n            name: name,\r\n            author: author,\r\n            type:type,\r\n            recommender:recommender\r\n        })\r\n        novel.save(function(err) {\r\n            if (err)\r\n                res.json({ message: \"Novel not added\", errmsg : err } )\r\n            else\r\n                res.json({ message: \"Novel Successfully added\", data: novel })\r\n        })\r\n    })\r\n}\r\n\r\nrouter.giveGrade = (req,res)=>{\r\n    Novel.findById(req.params.id, function(err,novel) {\r\n        if (err)\r\n            res.json({ message: \"Novel NOT Found!\", errmsg : err } )\r\n        else {\r\n            novel.grade = req.body.grade\r\n            novel.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: \"Novel NOT graded!\", errmsg : err } )\r\n                else\r\n                    res.json({ message: \"Novel Successfully graded!\", data: novel })\r\n            })\r\n        }\r\n    })\r\n}\r\nrouter.deleteNovel = (req, res) => {\r\n\r\n    Novel.findByIdAndRemove(req.params.id, function(err) {\r\n        if (err)\r\n            res.json({ message: \"Novels NOT Found!\", errmsg : err } )\r\n        else\r\n            res.json({ message: \"Novels Successfully Deleted!\",data: Novel})\r\n    })\r\n}\r\n\r\nmodule.exports = router\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572900029070
  },
  "{\"sourceRoot\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"filename\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\routes\\\\author.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test/api/novelTest.js \",\"root\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"plugins\":[],\"presets\":[]}:7.6.4:test/api/novelTest.js ": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\author.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test/api/novelTest.js ",
      "root": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\author.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\author.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
        "sourceFileName": "author.js"
      }
    },
    "ast": null,
    "code": "let Author = require(\"../models/author\");\n\nlet express = require(\"express\");\n\nlet router = express.Router();\n\nlet mongoose = require(\"mongoose\");\n\nmongoose.connect(\"mongodb://localhost:27017/novels\");\n\nrouter.findAll = (req, res) => {\n  // Return a JSON representation of our list\n  res.setHeader(\"Content-Type\", \"application/json\");\n  Author.find(function (err, author) {\n    if (err) res.send(err);\n    res.send(JSON.stringify(author, null, 10));\n  });\n};\n\nrouter.findOne = (req, res) => {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  Author.find({\n    \"_id\": req.params.id\n  }, function (err, author) {\n    if (err) res.json({\n      message: \"Author NOT Found!\",\n      errmsg: err\n    });else res.send(JSON.stringify(author, null, 10));\n  });\n};\n\nrouter.addAuthor = (req, res) => {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  var name = req.body.name;\n  var keyword1 = req.body.keyword1;\n  var keyword2 = req.body.keyword2;\n  var numofbooks = req.body.numofbooks;\n\n  if (name == \"\") {\n    res.json({\n      message: \"The author name can not be empty\"\n    });\n    return;\n  }\n\n  Author.findOne({\n    name: name\n  }, function (err, info) {\n    if (info) {\n      res.json({\n        message: \"The author is already exist\",\n        errmsg: err\n      });\n      return;\n    }\n\n    var author = new Author({\n      name: name,\n      keyword1: keyword1,\n      keyword2: keyword2,\n      numofbooks: numofbooks\n    });\n    author.save(function (err) {\n      if (err) res.json({\n        message: \"Author not added\",\n        errmsg: err\n      });else res.json({\n        message: \"Author Successfully added\",\n        data: author\n      });\n    });\n  });\n};\n\nrouter.collectAuthor = (req, res) => {\n  var author = getByValue(author, req.params.id);\n\n  if (author != null) {\n    author.numofcollected += 1;\n    res.json({\n      status: 200,\n      message: \"Collected Successful\",\n      author: author\n    });\n  } else res.send(\"Author NOT Found - collect NOT Successful!!\");\n};\n\nrouter.collectAuthor = (req, res) => {\n  Author.findById(req.params.id, function (err, author) {\n    if (err) res.json({\n      message: \"Author NOT Found!\",\n      errmsg: err\n    });else {\n      author.numofcollected += 1;\n      author.save(function (err) {\n        if (err) res.json({\n          message: \"Author is not being collected\",\n          errmsg: err\n        });else res.json({\n          message: \"Author Successfully collected!\",\n          data: author\n        });\n      });\n    }\n  });\n};\n\nrouter.removeCollection = (req, res) => {\n  Author.findByIdAndRemove(req.params.id, function (err) {\n    if (err) res.json({\n      message: \"Author NOT Found!\",\n      errmsg: err\n    });else res.json({\n      message: \"Author Successfully Deleted!\"\n    });\n  });\n};\n\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGhvci5qcyJdLCJuYW1lcyI6WyJBdXRob3IiLCJyZXF1aXJlIiwiZXhwcmVzcyIsInJvdXRlciIsIlJvdXRlciIsIm1vbmdvb3NlIiwiY29ubmVjdCIsImZpbmRBbGwiLCJyZXEiLCJyZXMiLCJzZXRIZWFkZXIiLCJmaW5kIiwiZXJyIiwiYXV0aG9yIiwic2VuZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaW5kT25lIiwicGFyYW1zIiwiaWQiLCJqc29uIiwibWVzc2FnZSIsImVycm1zZyIsImFkZEF1dGhvciIsIm5hbWUiLCJib2R5Iiwia2V5d29yZDEiLCJrZXl3b3JkMiIsIm51bW9mYm9va3MiLCJpbmZvIiwic2F2ZSIsImRhdGEiLCJjb2xsZWN0QXV0aG9yIiwiZ2V0QnlWYWx1ZSIsIm51bW9mY29sbGVjdGVkIiwic3RhdHVzIiwiZmluZEJ5SWQiLCJyZW1vdmVDb2xsZWN0aW9uIiwiZmluZEJ5SWRBbmRSZW1vdmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxrQkFBRCxDQUFwQjs7QUFDQSxJQUFJQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUNBLElBQUlFLE1BQU0sR0FBR0QsT0FBTyxDQUFDRSxNQUFSLEVBQWI7O0FBQ0EsSUFBSUMsUUFBUSxHQUFHSixPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQUksUUFBUSxDQUFDQyxPQUFULENBQWlCLGtDQUFqQjs7QUFFQUgsTUFBTSxDQUFDSSxPQUFQLEdBQWlCLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQzNCO0FBQ0FBLEVBQUFBLEdBQUcsQ0FBQ0MsU0FBSixDQUFjLGNBQWQsRUFBOEIsa0JBQTlCO0FBRUFWLEVBQUFBLE1BQU0sQ0FBQ1csSUFBUCxDQUFZLFVBQVNDLEdBQVQsRUFBY0MsTUFBZCxFQUFzQjtBQUM5QixRQUFJRCxHQUFKLEVBQ0lILEdBQUcsQ0FBQ0ssSUFBSixDQUFTRixHQUFU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TUMsR0FBTixLQUFjO0FBRXBDVCxFQUFBQSxNQUFNLENBQUNzQyxpQkFBUCxDQUF5QjlCLEdBQUcsQ0FBQ1UsTUFBSixDQUFXQyxFQUFwQyxFQUF3QyxVQUFTUCxHQUFULEVBQWM7QUFDbEQsUUFBSUEsR0FBSixFQUNJSCxHQUFHLENBQUNXLElBQUosQ0FBUztBQUFFQyxNQUFBQSxPQUFPLEVBQUUsbUJBQVg7QUFBZ0NDLE1BQUFBLE1BQU0sRUFBR1Y7QUFBekMsS0FBVCxFQURKLEtBR0lILEdBQUcsQ0FBQ1csSUFBSixDQUFTO0FBQUVDLE1BQUFBLE9BQU8sRUFBRTtBQUFYLEtBQVQ7QUFDUCxHQUxEO0FBTUgsQ0FSRDs7QUFXQWtCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnJDLE1BQWpCIiwic291cmNlUm9vdCI6IkU6XFx4dWV5aVxcMjAyMO+8iDHvvIlcXEFTXFxOb3ZlbElkZWFzLW1hc3RlclxcTm92ZWxJZGVhcy1tYXN0ZXJcXHJvdXRlcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBBdXRob3IgPSByZXF1aXJlKFwiLi4vbW9kZWxzL2F1dGhvclwiKVxyXG5sZXQgZXhwcmVzcyA9IHJlcXVpcmUoXCJleHByZXNzXCIpXHJcbmxldCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpXHJcbmxldCBtb25nb29zZSA9IHJlcXVpcmUoXCJtb25nb29zZVwiKVxyXG5tb25nb29zZS5jb25uZWN0KFwibW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNy9ub3ZlbHNcIilcclxuXHJcbnJvdXRlci5maW5kQWxsID0gKHJlcSwgcmVzKSA9PiB7XHJcbiAgICAvLyBSZXR1cm4gYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIG91ciBsaXN0XHJcbiAgICByZXMuc2V0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKVxyXG5cclxuICAgIEF1dGhvci5maW5kKGZ1bmN0aW9uKGVyciwgYXV0aG9yKSB7XHJcbiAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgcmVzLnNlbmQoZXJyKVxyXG5cclxuICAgICAgICByZXMuc2VuZChKU09OLnN0cmluZ2lmeShhdXRob3IsbnVsbCwxMCkpXHJcbiAgICB9KVxyXG59XHJcblxyXG5yb3V0ZXIuZmluZE9uZSA9IChyZXEsIHJlcykgPT4ge1xyXG5cclxuICAgIHJlcy5zZXRIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpXHJcblxyXG4gICAgQXV0aG9yLmZpbmQoeyBcIl9pZFwiIDogcmVxLnBhcmFtcy5pZCB9LGZ1bmN0aW9uKGVyciwgYXV0aG9yKSB7XHJcbiAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiBcIkF1dGhvciBOT1QgRm91bmQhXCIsIGVycm1zZyA6IGVyciB9IClcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJlcy5zZW5kKEpTT04uc3RyaW5naWZ5KGF1dGhvcixudWxsLDEwKSlcclxuICAgIH0pXHJcblxyXG59XHJcblxyXG5yb3V0ZXIuYWRkQXV0aG9yID0gKHJlcSwgcmVzKSA9PiB7XHJcblxyXG4gICAgcmVzLnNldEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIilcclxuXHJcbiAgICB2YXIgbmFtZSA9IHJlcS5ib2R5Lm5hbWVcclxuICAgIHZhciBrZXl3b3JkMSA9IHJlcS5ib2R5LmtleXdvcmQxXHJcbiAgICB2YXIga2V5d29yZDIgPSByZXEuYm9keS5rZXl3b3JkMlxyXG4gICAgdmFyIG51bW9mYm9va3MgPSByZXEuYm9keS5udW1vZmJvb2tzXHJcblxyXG4gICAgaWYoIG5hbWUgPT0gXCJcIil7XHJcbiAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiBcIlRoZSBhdXRob3IgbmFtZSBjYW4gbm90IGJlIGVtcHR5XCJ9IClcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxuXHJcbiAgICBBdXRob3IuZmluZE9uZSh7XHJcbiAgICAgICAgbmFtZTpuYW1lXHJcbiAgICB9LGZ1bmN0aW9uIChlcnIsIGluZm8pIHtcclxuICAgICAgICBpZihpbmZvKXtcclxuICAgICAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiBcIlRoZSBhdXRob3IgaXMgYWxyZWFkeSBleGlzdFwiLGVycm1zZyA6IGVycn0gKVxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGF1dGhvciA9IG5ldyBBdXRob3Ioe1xyXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICBrZXl3b3JkMToga2V5d29yZDEsXHJcbiAgICAgICAgICAgIGtleXdvcmQyOiBrZXl3b3JkMixcclxuICAgICAgICAgICAgbnVtb2Zib29rczpudW1vZmJvb2tzXHJcbiAgICAgICAgfSlcclxuICAgICAgICBhdXRob3Iuc2F2ZShmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgIHJlcy5qc29uKHsgbWVzc2FnZTogXCJBdXRob3Igbm90IGFkZGVkXCIsIGVycm1zZyA6IGVyciB9IClcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiBcIkF1dGhvciBTdWNjZXNzZnVsbHkgYWRkZWRcIiwgZGF0YTogYXV0aG9yIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcbn1cclxuXHJcbnJvdXRlci5jb2xsZWN0QXV0aG9yID0gKHJlcSwgcmVzKSA9PiB7XHJcbiAgICB2YXIgYXV0aG9yID0gZ2V0QnlWYWx1ZShhdXRob3IscmVxLnBhcmFtcy5pZClcclxuXHJcbiAgICBpZiAoYXV0aG9yICE9IG51bGwpIHtcclxuICAgICAgICBhdXRob3IubnVtb2Zjb2xsZWN0ZWQgKz0gMVxyXG4gICAgICAgIHJlcy5qc29uKHtzdGF0dXMgOiAyMDAsIG1lc3NhZ2UgOiBcIkNvbGxlY3RlZCBTdWNjZXNzZnVsXCIgLCBhdXRob3IgOiBhdXRob3IgfSlcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICByZXMuc2VuZChcIkF1dGhvciBOT1QgRm91bmQgLSBjb2xsZWN0IE5PVCBTdWNjZXNzZnVsISFcIilcclxufVxyXG5yb3V0ZXIuY29sbGVjdEF1dGhvciA9IChyZXEsIHJlcykgPT4ge1xyXG5cclxuICAgIEF1dGhvci5maW5kQnlJZChyZXEucGFyYW1zLmlkLCBmdW5jdGlvbihlcnIsYXV0aG9yKSB7XHJcbiAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiBcIkF1dGhvciBOT1QgRm91bmQhXCIsIGVycm1zZyA6IGVyciB9IClcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXV0aG9yLm51bW9mY29sbGVjdGVkICs9IDFcclxuICAgICAgICAgICAgYXV0aG9yLnNhdmUoZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgICAgICByZXMuanNvbih7IG1lc3NhZ2U6IFwiQXV0aG9yIGlzIG5vdCBiZWluZyBjb2xsZWN0ZWRcIiwgZXJybXNnIDogZXJyIH0gKVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5qc29uKHsgbWVzc2FnZTogXCJBdXRob3IgU3VjY2Vzc2Z1bGx5IGNvbGxlY3RlZCFcIiwgZGF0YTogYXV0aG9yIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufVxyXG5cclxucm91dGVyLnJlbW92ZUNvbGxlY3Rpb24gPSAocmVxLCByZXMpID0+IHtcclxuXHJcbiAgICBBdXRob3IuZmluZEJ5SWRBbmRSZW1vdmUocmVxLnBhcmFtcy5pZCwgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiBcIkF1dGhvciBOT1QgRm91bmQhXCIsIGVycm1zZyA6IGVyciB9IClcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJlcy5qc29uKHsgbWVzc2FnZTogXCJBdXRob3IgU3VjY2Vzc2Z1bGx5IERlbGV0ZWQhXCJ9KVxyXG4gICAgfSlcclxufVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcm91dGVyIl19",
    "map": {
      "version": 3,
      "sources": [
        "author.js"
      ],
      "names": [
        "Author",
        "require",
        "express",
        "router",
        "Router",
        "mongoose",
        "connect",
        "findAll",
        "req",
        "res",
        "setHeader",
        "find",
        "err",
        "author",
        "send",
        "JSON",
        "stringify",
        "findOne",
        "params",
        "id",
        "json",
        "message",
        "errmsg",
        "addAuthor",
        "name",
        "body",
        "keyword1",
        "keyword2",
        "numofbooks",
        "info",
        "save",
        "data",
        "collectAuthor",
        "getByValue",
        "numofcollected",
        "status",
        "findById",
        "removeCollection",
        "findByIdAndRemove",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
      "sourcesContent": [
        "let Author = require(\"../models/author\")\r\nlet express = require(\"express\")\r\nlet router = express.Router()\r\nlet mongoose = require(\"mongoose\")\r\nmongoose.connect(\"mongodb://localhost:27017/novels\")\r\n\r\nrouter.findAll = (req, res) => {\r\n    // Return a JSON representation of our list\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    Author.find(function(err, author) {\r\n        if (err)\r\n            res.send(err)\r\n\r\n        res.send(JSON.stringify(author,null,10))\r\n    })\r\n}\r\n\r\nrouter.findOne = (req, res) => {\r\n\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    Author.find({ \"_id\" : req.params.id },function(err, author) {\r\n        if (err)\r\n            res.json({ message: \"Author NOT Found!\", errmsg : err } )\r\n        else\r\n            res.send(JSON.stringify(author,null,10))\r\n    })\r\n\r\n}\r\n\r\nrouter.addAuthor = (req, res) => {\r\n\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    var name = req.body.name\r\n    var keyword1 = req.body.keyword1\r\n    var keyword2 = req.body.keyword2\r\n    var numofbooks = req.body.numofbooks\r\n\r\n    if( name == \"\"){\r\n        res.json({ message: \"The author name can not be empty\"} )\r\n        return\r\n    }\r\n\r\n    Author.findOne({\r\n        name:name\r\n    },function (err, info) {\r\n        if(info){\r\n            res.json({ message: \"The author is already exist\",errmsg : err} )\r\n            return\r\n        }\r\n        var author = new Author({\r\n            name: name,\r\n            keyword1: keyword1,\r\n            keyword2: keyword2,\r\n            numofbooks:numofbooks\r\n        })\r\n        author.save(function(err) {\r\n            if (err)\r\n                res.json({ message: \"Author not added\", errmsg : err } )\r\n            else\r\n                res.json({ message: \"Author Successfully added\", data: author })\r\n        })\r\n    })\r\n}\r\n\r\nrouter.collectAuthor = (req, res) => {\r\n    var author = getByValue(author,req.params.id)\r\n\r\n    if (author != null) {\r\n        author.numofcollected += 1\r\n        res.json({status : 200, message : \"Collected Successful\" , author : author })\r\n    }\r\n    else\r\n        res.send(\"Author NOT Found - collect NOT Successful!!\")\r\n}\r\nrouter.collectAuthor = (req, res) => {\r\n\r\n    Author.findById(req.params.id, function(err,author) {\r\n        if (err)\r\n            res.json({ message: \"Author NOT Found!\", errmsg : err } )\r\n        else {\r\n            author.numofcollected += 1\r\n            author.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: \"Author is not being collected\", errmsg : err } )\r\n                else\r\n                    res.json({ message: \"Author Successfully collected!\", data: author })\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nrouter.removeCollection = (req, res) => {\r\n\r\n    Author.findByIdAndRemove(req.params.id, function(err) {\r\n        if (err)\r\n            res.json({ message: \"Author NOT Found!\", errmsg : err } )\r\n        else\r\n            res.json({ message: \"Author Successfully Deleted!\"})\r\n    })\r\n}\r\n\r\n\r\nmodule.exports = router"
      ]
    },
    "sourceType": "module",
    "mtime": 1572897589849
  },
  "{\"sourceRoot\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"filename\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\\\\routes\\\\user.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test/api/novelTest.js \",\"root\":\"E:\\\\xueyi\\\\2020（1）\\\\AS\\\\NovelIdeas-master\\\\NovelIdeas-master\",\"plugins\":[],\"presets\":[]}:7.6.4:test/api/novelTest.js ": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\user.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test/api/novelTest.js ",
      "root": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\user.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes\\user.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
        "sourceFileName": "user.js"
      }
    },
    "ast": null,
    "code": "let User = require(\"../models/user\");\n\nlet express = require(\"express\");\n\nlet router = express.Router();\n\nlet mongoose = require(\"mongoose\");\n\nmongoose.connect(\"mongodb://localhost:27017/novels\");\n\nrouter.editPassword = (req, res) => {\n  User.findById(req.params.id, function (err, user) {\n    var newpassword = req.body.password;\n    if (err) res.json({\n      message: \"User NOT Found!\",\n      errmsg: err\n    });else if (user.password == newpassword) {\n      res.json({\n        message: \"No change to the Password\",\n        data: user\n      });\n    } else {\n      user.password = newpassword;\n      user.save(function (err) {\n        if (err) res.json({\n          message: \"Password Not changed!\",\n          errmsg: err\n        });else res.json({\n          message: \"Password Successfully changed!\",\n          data: user\n        });\n      });\n    }\n  });\n};\n\nrouter.register = (req, res) => {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  var username = req.body.username;\n  var password = req.body.password;\n  var email = req.body.email;\n\n  if (username == \"\") {\n    res.json({\n      message: \"The username can not be empty\"\n    });\n    return;\n  }\n\n  if (password == \"\") {\n    res.json({\n      message: \"The password can not be empty\"\n    });\n    return;\n  }\n\n  if (email == \"\") {\n    res.json({\n      message: \"The email can not be empty\"\n    });\n    return;\n  }\n\n  User.findOne({\n    username: username\n  }, function (err, info) {\n    if (info) {\n      res.json({\n        message: \"The username is occupied\",\n        errmsg: err\n      });\n      return;\n    }\n\n    var user = new User({\n      username: username,\n      password: password,\n      email: email\n    });\n    user.save(function (err) {\n      if (err) res.json({\n        message: \"User Not Registered\",\n        errmsg: err\n      });else res.json({\n        message: \"User Successfully registered\",\n        data: user\n      });\n    });\n  });\n};\n\nrouter.login = (req, res) => {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  var username = req.body.username;\n  var password = req.body.password;\n\n  if (password == \"\" || username == \"\") {\n    res.json({\n      message: \"The username or password  can not be empty\"\n    });\n    return;\n  }\n\n  User.findOne({\n    username: username\n  }, function (err, user) {\n    if (user) {\n      if (user.password == password) {\n        res.json({\n          message: \"Sign in Successfully\",\n          data: user\n        });\n        return;\n      }\n\n      res.json({\n        message: \"Wrong Password\"\n      });\n    } else {\n      res.json({\n        message: \"Username is not exist\"\n      });\n    }\n  });\n};\n\nrouter.userInfo = (req, res) => {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  User.find({\n    \"_id\": req.params.id\n  }, function (err, user) {\n    if (err) res.json({\n      message: \"User NOT Found!\",\n      errmsg: err\n    });else res.send(JSON.stringify(user, null, 10));\n  });\n};\n\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXIuanMiXSwibmFtZXMiOlsiVXNlciIsInJlcXVpcmUiLCJleHByZXNzIiwicm91dGVyIiwiUm91dGVyIiwibW9uZ29vc2UiLCJjb25uZWN0IiwiZWRpdFBhc3N3b3JkIiwicmVxIiwicmVzIiwiZmluZEJ5SWQiLCJwYXJhbXMiLCJpZCIsImVyciIsInVzZXIiLCJuZXdwYXNzd29yZCIsImJvZHkiLCJwYXNzd29yZCIsImpzb24iLCJtZXNzYWdlIiwiZXJybXNnIiwiZGF0YSIsInNhdmUiLCJyZWdpc3RlciIsInNldEhlYWRlciIsInVzZXJuYW1lIiwiZW1haWwiLCJmaW5kT25lIiwiaW5mbyIsImxvZ2luIiwidXNlckluZm8iLCJmaW5kIiwic2VuZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxnQkFBRCxDQUFsQjs7QUFDQSxJQUFJQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUNBLElBQUlFLE1BQU0sR0FBR0QsT0FBTyxDQUFDRSxNQUFSLEVBQWI7O0FBQ0EsSUFBSUMsUUFBUSxHQUFHSixPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQUksUUFBUSxDQUFDQyxPQUFULENBQWlCLGtDQUFqQjs7QUFJQUgsTUFBTSxDQUFDSSxZQUFQLEdBQXNCLENBQUNDLEdBQUQsRUFBS0MsR0FBTCxLQUFXO0FBRTdCVCxFQUFBQSxJQUFJLENBQUNVLFFBQUwsQ0FBY0YsR0FBRyxDQUFDRyxNQUFKLENBQVdDLEVBQXpCLEVBQTZCLFVBQVNDLEdBQVQsRUFBYUMsSUFBYixFQUFtQjtBQUM1QyxRQUFJQyxXQUFXLEdBQUdQLEdBQUcsQ0FBQ1EsSUFBSixDQUFTQyxRQUEzQjtBQUNBLFFBQUlKLEdBQUosRUFDSUosR0FBRyxDQUFDUyxJQUFKLENBQVM7QUFBRUMsTUFBQUEsT0FBTyxFQUFFLGlCQUFYO0FBQThCQyxNQUFBQSxNQUFNLEVBQUdQ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QUcsQ0FBQ0csTUFBSixDQUFXQztBQUFyQixHQUFWLEVBQW9DLFVBQVNDLEdBQVQsRUFBY0MsSUFBZCxFQUFvQjtBQUNwRCxRQUFJRCxHQUFKLEVBQ0lKLEdBQUcsQ0FBQ1MsSUFBSixDQUFTO0FBQUVDLE1BQUFBLE9BQU8sRUFBRSxpQkFBWDtBQUE4QkMsTUFBQUEsTUFBTSxFQUFHUDtBQUF2QyxLQUFULEVBREosS0FHSUosR0FBRyxDQUFDdUIsSUFBSixDQUFTQyxJQUFJLENBQUNDLFNBQUwsQ0FBZXBCLElBQWYsRUFBb0IsSUFBcEIsRUFBeUIsRUFBekIsQ0FBVDtBQUNQLEdBTEQ7QUFNSCxDQVZEOztBQVdBcUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCakMsTUFBakIiLCJzb3VyY2VSb290IjoiRTpcXHh1ZXlpXFwyMDIw77yIMe+8iVxcQVNcXE5vdmVsSWRlYXMtbWFzdGVyXFxOb3ZlbElkZWFzLW1hc3Rlclxccm91dGVzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IFVzZXIgPSByZXF1aXJlKFwiLi4vbW9kZWxzL3VzZXJcIilcclxubGV0IGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKVxyXG5sZXQgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKVxyXG5sZXQgbW9uZ29vc2UgPSByZXF1aXJlKFwibW9uZ29vc2VcIilcclxubW9uZ29vc2UuY29ubmVjdChcIm1vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcvbm92ZWxzXCIpXHJcblxyXG5cclxuXHJcbnJvdXRlci5lZGl0UGFzc3dvcmQgPSAocmVxLHJlcyk9PntcclxuXHJcbiAgICBVc2VyLmZpbmRCeUlkKHJlcS5wYXJhbXMuaWQsIGZ1bmN0aW9uKGVycix1c2VyKSB7XHJcbiAgICAgICAgdmFyIG5ld3Bhc3N3b3JkID0gcmVxLmJvZHkucGFzc3dvcmRcclxuICAgICAgICBpZiAoZXJyKVxyXG4gICAgICAgICAgICByZXMuanNvbih7IG1lc3NhZ2U6IFwiVXNlciBOT1QgRm91bmQhXCIsIGVycm1zZyA6IGVyciB9IClcclxuICAgICAgICBlbHNlIGlmKHVzZXIucGFzc3dvcmQgPT0gbmV3cGFzc3dvcmQpe1xyXG4gICAgICAgICAgICByZXMuanNvbih7IG1lc3NhZ2U6IFwiTm8gY2hhbmdlIHRvIHRoZSBQYXNzd29yZFwiLCBkYXRhOiB1c2VyfSApXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB1c2VyLnBhc3N3b3JkID0gbmV3cGFzc3dvcmRcclxuICAgICAgICAgICAgdXNlci5zYXZlKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiBcIlBhc3N3b3JkIE5vdCBjaGFuZ2VkIVwiLCBlcnJtc2cgOiBlcnIgfSApXHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiBcIlBhc3N3b3JkIFN1Y2Nlc3NmdWxseSBjaGFuZ2VkIVwiLCBkYXRhOiB1c2VyIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufVxyXG5cclxucm91dGVyLnJlZ2lzdGVyID0gKHJlcSxyZXMpID0+IHtcclxuICAgIHJlcy5zZXRIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpXHJcblxyXG4gICAgdmFyIHVzZXJuYW1lID0gcmVxLmJvZHkudXNlcm5hbWVcclxuICAgIHZhciBwYXNzd29yZCA9IHJlcS5ib2R5LnBhc3N3b3JkXHJcbiAgICB2YXIgZW1haWwgPSByZXEuYm9keS5lbWFpbFxyXG5cclxuXHJcbiAgICBpZiggdXNlcm5hbWUgPT0gXCJcIil7XHJcbiAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiBcIlRoZSB1c2VybmFtZSBjYW4gbm90IGJlIGVtcHR5XCJ9IClcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGlmKCBwYXNzd29yZCA9PSBcIlwiKXtcclxuICAgICAgICByZXMuanNvbih7IG1lc3NhZ2U6IFwiVGhlIHBhc3N3b3JkIGNhbiBub3QgYmUgZW1wdHlcIn0gKVxyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgaWYoIGVtYWlsID09IFwiXCIpe1xyXG4gICAgICAgIHJlcy5qc29uKHsgbWVzc2FnZTogXCJUaGUgZW1haWwgY2FuIG5vdCBiZSBlbXB0eVwifSApXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBVc2VyLmZpbmRPbmUoe1xyXG4gICAgICAgIHVzZXJuYW1lOnVzZXJuYW1lXHJcbiAgICB9LGZ1bmN0aW9uIChlcnIsIGluZm8pIHtcclxuICAgICAgICBpZihpbmZvKXtcclxuICAgICAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiBcIlRoZSB1c2VybmFtZSBpcyBvY2N1cGllZFwiLGVycm1zZyA6IGVycn0gKVxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHVzZXIgPSBuZXcgVXNlcih7XHJcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcclxuICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkLFxyXG4gICAgICAgICAgICBlbWFpbDplbWFpbFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdXNlci5zYXZlKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICBpZiAoZXJyKVxyXG4gICAgICAgICAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiBcIlVzZXIgTm90IFJlZ2lzdGVyZWRcIiwgZXJybXNnIDogZXJyIH0gKVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXMuanNvbih7IG1lc3NhZ2U6IFwiVXNlciBTdWNjZXNzZnVsbHkgcmVnaXN0ZXJlZFwiLCBkYXRhOiB1c2VyIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcblxyXG59XHJcblxyXG5yb3V0ZXIubG9naW4gPSAocmVxLHJlcykgPT4ge1xyXG4gICAgcmVzLnNldEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIilcclxuXHJcbiAgICB2YXIgdXNlcm5hbWUgPSByZXEuYm9keS51c2VybmFtZVxyXG4gICAgdmFyIHBhc3N3b3JkID0gcmVxLmJvZHkucGFzc3dvcmRcclxuXHJcbiAgICBpZihwYXNzd29yZCA9PSBcIlwifHwgdXNlcm5hbWU9PVwiXCIpe1xyXG4gICAgICAgIHJlcy5qc29uKHsgbWVzc2FnZTogXCJUaGUgdXNlcm5hbWUgb3IgcGFzc3dvcmQgIGNhbiBub3QgYmUgZW1wdHlcIn0gKVxyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgVXNlci5maW5kT25lKHtcclxuICAgICAgICB1c2VybmFtZTp1c2VybmFtZVxyXG4gICAgfSxmdW5jdGlvbiAoZXJyLCB1c2VyKSB7XHJcbiAgICAgICAgaWYodXNlcil7XHJcbiAgICAgICAgICAgIGlmKHVzZXIucGFzc3dvcmQgPT0gcGFzc3dvcmQpe1xyXG4gICAgICAgICAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiBcIlNpZ24gaW4gU3VjY2Vzc2Z1bGx5XCIsZGF0YTp1c2VyfSlcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlcy5qc29uKHsgbWVzc2FnZTogXCJXcm9uZyBQYXNzd29yZFwifSlcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgcmVzLmpzb24oeyBtZXNzYWdlOiBcIlVzZXJuYW1lIGlzIG5vdCBleGlzdFwifSlcclxuICAgICAgICB9XHJcblxyXG4gICAgfSlcclxufVxyXG5cclxucm91dGVyLnVzZXJJbmZvID0gKHJlcSwgcmVzKSA9PiB7XHJcblxyXG4gICAgcmVzLnNldEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIilcclxuXHJcbiAgICBVc2VyLmZpbmQoeyBcIl9pZFwiIDogcmVxLnBhcmFtcy5pZCB9LGZ1bmN0aW9uKGVyciwgdXNlcikge1xyXG4gICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgIHJlcy5qc29uKHsgbWVzc2FnZTogXCJVc2VyIE5PVCBGb3VuZCFcIiwgZXJybXNnIDogZXJyIH0gKVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmVzLnNlbmQoSlNPTi5zdHJpbmdpZnkodXNlcixudWxsLDEwKSlcclxuICAgIH0pXHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXIiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "user.js"
      ],
      "names": [
        "User",
        "require",
        "express",
        "router",
        "Router",
        "mongoose",
        "connect",
        "editPassword",
        "req",
        "res",
        "findById",
        "params",
        "id",
        "err",
        "user",
        "newpassword",
        "body",
        "password",
        "json",
        "message",
        "errmsg",
        "data",
        "save",
        "register",
        "setHeader",
        "username",
        "email",
        "findOne",
        "info",
        "login",
        "userInfo",
        "find",
        "send",
        "JSON",
        "stringify",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAAlB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIE,MAAM,GAAGD,OAAO,CAACE,MAAR,EAAb;;AACA,IAAIC,QAAQ,GAAGJ,OAAO,CAAC,UAAD,CAAtB;;AACAI,QAAQ,CAACC,OAAT,CAAiB,kCAAjB;;AAIAH,MAAM,CAACI,YAAP,GAAsB,CAACC,GAAD,EAAKC,GAAL,KAAW;AAE7BT,EAAAA,IAAI,CAACU,QAAL,CAAcF,GAAG,CAACG,MAAJ,CAAWC,EAAzB,EAA6B,UAASC,GAAT,EAAaC,IAAb,EAAmB;AAC5C,QAAIC,WAAW,GAAGP,GAAG,CAACQ,IAAJ,CAASC,QAA3B;AACA,QAAIJ,GAAJ,EACIJ,GAAG,CAACS,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,iBAAX;AAA8BC,MAAAA,MAAM,EAAGP;AAAvC,KAAT,EADJ,KAEK,IAAGC,IAAI,CAACG,QAAL,IAAiBF,WAApB,EAAgC;AACjCN,MAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE,2BAAX;AAAwCE,QAAAA,IAAI,EAAEP;AAA9C,OAAT;AACH,KAFI,MAGA;AACDA,MAAAA,IAAI,CAACG,QAAL,GAAgBF,WAAhB;AACAD,MAAAA,IAAI,CAACQ,IAAL,CAAU,UAAUT,GAAV,EAAe;AACrB,YAAIA,GAAJ,EACIJ,GAAG,CAACS,IAAJ,CAAS;AAAEC,UAAAA,OAAO,EAAE,uBAAX;AAAoCC,UAAAA,MAAM,EAAGP;AAA7C,SAAT,EADJ,KAGIJ,GAAG,CAACS,IAAJ,CAAS;AAAEC,UAAAA,OAAO,EAAE,gCAAX;AAA6CE,UAAAA,IAAI,EAAEP;AAAnD,SAAT;AACP,OALD;AAMH;AACJ,GAhBD;AAiBH,CAnBD;;AAqBAX,MAAM,CAACoB,QAAP,GAAkB,CAACf,GAAD,EAAKC,GAAL,KAAa;AAC3BA,EAAAA,GAAG,CAACe,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AAEA,MAAIC,QAAQ,GAAGjB,GAAG,CAACQ,IAAJ,CAASS,QAAxB;AACA,MAAIR,QAAQ,GAAGT,GAAG,CAACQ,IAAJ,CAASC,QAAxB;AACA,MAAIS,KAAK,GAAGlB,GAAG,CAACQ,IAAJ,CAASU,KAArB;;AAGA,MAAID,QAAQ,IAAI,EAAhB,EAAmB;AACfhB,IAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT;AACA;AACH;;AACD,MAAIF,QAAQ,IAAI,EAAhB,EAAmB;AACfR,IAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT;AACA;AACH;;AACD,MAAIO,KAAK,IAAI,EAAb,EAAgB;AACZjB,IAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT;AACA;AACH;;AACDnB,EAAAA,IAAI,CAAC2B,OAAL,CAAa;AACTF,IAAAA,QAAQ,EAACA;AADA,GAAb,EAEE,UAAUZ,GAAV,EAAee,IAAf,EAAqB;AACnB,QAAGA,IAAH,EAAQ;AACJnB,MAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE,0BAAX;AAAsCC,QAAAA,MAAM,EAAGP;AAA/C,OAAT;AACA;AACH;;AACD,QAAIC,IAAI,GAAG,IAAId,IAAJ,CAAS;AAChByB,MAAAA,QAAQ,EAAEA,QADM;AAEhBR,MAAAA,QAAQ,EAAEA,QAFM;AAGhBS,MAAAA,KAAK,EAACA;AAHU,KAAT,CAAX;AAKAZ,IAAAA,IAAI,CAACQ,IAAL,CAAU,UAAST,GAAT,EAAc;AACpB,UAAIA,GAAJ,EACIJ,GAAG,CAACS,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE,qBAAX;AAAkCC,QAAAA,MAAM,EAAGP;AAA3C,OAAT,EADJ,KAGIJ,GAAG,CAACS,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE,8BAAX;AAA2CE,QAAAA,IAAI,EAAEP;AAAjD,OAAT;AACP,KALD;AAMH,GAlBD;AAoBH,CAxCD;;AA0CAX,MAAM,CAAC0B,KAAP,GAAe,CAACrB,GAAD,EAAKC,GAAL,KAAa;AACxBA,EAAAA,GAAG,CAACe,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AAEA,MAAIC,QAAQ,GAAGjB,GAAG,CAACQ,IAAJ,CAASS,QAAxB;AACA,MAAIR,QAAQ,GAAGT,GAAG,CAACQ,IAAJ,CAASC,QAAxB;;AAEA,MAAGA,QAAQ,IAAI,EAAZ,IAAiBQ,QAAQ,IAAE,EAA9B,EAAiC;AAC7BhB,IAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT;AACA;AACH;;AACDnB,EAAAA,IAAI,CAAC2B,OAAL,CAAa;AACTF,IAAAA,QAAQ,EAACA;AADA,GAAb,EAEE,UAAUZ,GAAV,EAAeC,IAAf,EAAqB;AACnB,QAAGA,IAAH,EAAQ;AACJ,UAAGA,IAAI,CAACG,QAAL,IAAiBA,QAApB,EAA6B;AACzBR,QAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEC,UAAAA,OAAO,EAAE,sBAAX;AAAkCE,UAAAA,IAAI,EAACP;AAAvC,SAAT;AACA;AACH;;AACDL,MAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAT;AACH,KAND,MAOI;AACAV,MAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAT;AACH;AAEJ,GAdD;AAeH,CAzBD;;AA2BAhB,MAAM,CAAC2B,QAAP,GAAkB,CAACtB,GAAD,EAAMC,GAAN,KAAc;AAE5BA,EAAAA,GAAG,CAACe,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AAEAxB,EAAAA,IAAI,CAAC+B,IAAL,CAAU;AAAE,WAAQvB,GAAG,CAACG,MAAJ,CAAWC;AAArB,GAAV,EAAoC,UAASC,GAAT,EAAcC,IAAd,EAAoB;AACpD,QAAID,GAAJ,EACIJ,GAAG,CAACS,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,iBAAX;AAA8BC,MAAAA,MAAM,EAAGP;AAAvC,KAAT,EADJ,KAGIJ,GAAG,CAACuB,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAepB,IAAf,EAAoB,IAApB,EAAyB,EAAzB,CAAT;AACP,GALD;AAMH,CAVD;;AAWAqB,MAAM,CAACC,OAAP,GAAiBjC,MAAjB",
      "sourceRoot": "E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes",
      "sourcesContent": [
        "let User = require(\"../models/user\")\r\nlet express = require(\"express\")\r\nlet router = express.Router()\r\nlet mongoose = require(\"mongoose\")\r\nmongoose.connect(\"mongodb://localhost:27017/novels\")\r\n\r\n\r\n\r\nrouter.editPassword = (req,res)=>{\r\n\r\n    User.findById(req.params.id, function(err,user) {\r\n        var newpassword = req.body.password\r\n        if (err)\r\n            res.json({ message: \"User NOT Found!\", errmsg : err } )\r\n        else if(user.password == newpassword){\r\n            res.json({ message: \"No change to the Password\", data: user} )\r\n        }\r\n        else {\r\n            user.password = newpassword\r\n            user.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: \"Password Not changed!\", errmsg : err } )\r\n                else\r\n                    res.json({ message: \"Password Successfully changed!\", data: user })\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nrouter.register = (req,res) => {\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    var username = req.body.username\r\n    var password = req.body.password\r\n    var email = req.body.email\r\n\r\n\r\n    if( username == \"\"){\r\n        res.json({ message: \"The username can not be empty\"} )\r\n        return\r\n    }\r\n    if( password == \"\"){\r\n        res.json({ message: \"The password can not be empty\"} )\r\n        return\r\n    }\r\n    if( email == \"\"){\r\n        res.json({ message: \"The email can not be empty\"} )\r\n        return\r\n    }\r\n    User.findOne({\r\n        username:username\r\n    },function (err, info) {\r\n        if(info){\r\n            res.json({ message: \"The username is occupied\",errmsg : err} )\r\n            return\r\n        }\r\n        var user = new User({\r\n            username: username,\r\n            password: password,\r\n            email:email\r\n        })\r\n        user.save(function(err) {\r\n            if (err)\r\n                res.json({ message: \"User Not Registered\", errmsg : err } )\r\n            else\r\n                res.json({ message: \"User Successfully registered\", data: user })\r\n        })\r\n    })\r\n\r\n}\r\n\r\nrouter.login = (req,res) => {\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    var username = req.body.username\r\n    var password = req.body.password\r\n\r\n    if(password == \"\"|| username==\"\"){\r\n        res.json({ message: \"The username or password  can not be empty\"} )\r\n        return\r\n    }\r\n    User.findOne({\r\n        username:username\r\n    },function (err, user) {\r\n        if(user){\r\n            if(user.password == password){\r\n                res.json({ message: \"Sign in Successfully\",data:user})\r\n                return\r\n            }\r\n            res.json({ message: \"Wrong Password\"})\r\n        }\r\n        else{\r\n            res.json({ message: \"Username is not exist\"})\r\n        }\r\n\r\n    })\r\n}\r\n\r\nrouter.userInfo = (req, res) => {\r\n\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    User.find({ \"_id\" : req.params.id },function(err, user) {\r\n        if (err)\r\n            res.json({ message: \"User NOT Found!\", errmsg : err } )\r\n        else\r\n            res.send(JSON.stringify(user,null,10))\r\n    })\r\n}\r\nmodule.exports = router"
      ]
    },
    "sourceType": "module",
    "mtime": 1572897589853
  }
}