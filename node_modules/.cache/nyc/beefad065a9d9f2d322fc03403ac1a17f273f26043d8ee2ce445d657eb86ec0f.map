{"version":3,"sources":["novels.js"],"names":["Novel","require","express","router","Router","mongoose","connect","findAll","req","res","setHeader","find","err","novels","send","JSON","stringify","findOne","params","id","novel","json","message","errmsg","addNovel","name","body","author","type","recommender","info","save","data","giveGrade","findById","grade","deleteNovel","findByIdAndRemove","module","exports"],"mappings":"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","sourceRoot":"E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes","sourcesContent":["let Novel = require(\"../models/novels\")\r\nlet express = require(\"express\")\r\nlet router = express.Router()\r\nlet mongoose = require(\"mongoose\")\r\nmongoose.connect(\"mongodb://localhost:27017/novels\")\r\n\r\nrouter.findAll = (req, res) => {\r\n    // Return a JSON representation of our list\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    Novel.find(function(err, novels) {\r\n        if (err)\r\n            res.send(err)\r\n\r\n        res.send(JSON.stringify(novels,null,10))\r\n    })\r\n}\r\n\r\nrouter.findOne = (req, res) => {\r\n\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    Novel.find({ \"_id\" : req.params.id },function(err, novel) {\r\n        if (err)\r\n            res.json({ message: \"Novel NOT Found!\", errmsg : err } )\r\n        else\r\n            res.send(JSON.stringify(novel,null,10))\r\n    })\r\n\r\n}\r\n\r\nrouter.addNovel = (req, res) => {\r\n\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    var name = req.body.name\r\n    var author = req.body.author\r\n    var type = req.body.type\r\n    var recommender = req.body.recommender\r\n\r\n    if( name == \"\"){\r\n        res.json({ message: \"The novel name can not be empty\"} )\r\n        return\r\n    }\r\n\r\n    Novel.findOne({\r\n        name:name\r\n    },function (err, info) {\r\n        if(info){\r\n            res.json({ message: \"The novel is already exist\",errmsg : err} )\r\n            return\r\n        }\r\n        var novel = new Novel({\r\n            name: name,\r\n            author: author,\r\n            type:type,\r\n            recommender:recommender\r\n        })\r\n        novel.save(function(err) {\r\n            if (err)\r\n                res.json({ message: \"Novel not added\", errmsg : err } )\r\n            else\r\n                res.json({ message: \"Novel Successfully added\", data: novel })\r\n        })\r\n    })\r\n}\r\n\r\nrouter.giveGrade = (req,res)=>{\r\n    Novel.findById(req.params.id, function(err,novel) {\r\n        if (err)\r\n            res.json({ message: \"Novel NOT Found!\", errmsg : err } )\r\n        else {\r\n            novel.grade = req.body.grade\r\n            novel.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: \"Novel NOT graded!\", errmsg : err } )\r\n                else\r\n                    res.json({ message: \"Novel Successfully graded!\", data: novel })\r\n            })\r\n        }\r\n    })\r\n}\r\nrouter.deleteNovel = (req, res) => {\r\n\r\n    Novel.findByIdAndRemove(req.params.id, function(err) {\r\n        if (err)\r\n            res.json({ message: \"Novels NOT Found!\", errmsg : err } )\r\n        else\r\n            res.json({ message: \"Novels Successfully Deleted!\",data: Novel})\r\n    })\r\n}\r\n\r\nmodule.exports = router"]}