{"version":3,"sources":["author.js"],"names":["Author","require","express","router","Router","mongoose","connect","findAll","req","res","setHeader","find","err","author","send","JSON","stringify","findOne","params","id","json","message","errmsg","addAuthor","name","body","keyword1","keyword2","numofbooks","info","save","data","collectAuthor","getByValue","numofcollected","status","findById","removeCollection","findByIdAndRemove","module","exports"],"mappings":"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","sourceRoot":"E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes","sourcesContent":["let Author = require(\"../models/author\")\r\nlet express = require(\"express\")\r\nlet router = express.Router()\r\nlet mongoose = require(\"mongoose\")\r\nmongoose.connect(\"mongodb://localhost:27017/novels\")\r\n\r\nrouter.findAll = (req, res) => {\r\n    // Return a JSON representation of our list\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    Author.find(function(err, author) {\r\n        if (err)\r\n            res.send(err)\r\n\r\n        res.send(JSON.stringify(author,null,10))\r\n    })\r\n}\r\n\r\nrouter.findOne = (req, res) => {\r\n\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    Author.find({ \"_id\" : req.params.id },function(err, author) {\r\n        if (err)\r\n            res.json({ message: \"Author NOT Found!\", errmsg : err } )\r\n        else\r\n            res.send(JSON.stringify(author,null,10))\r\n    })\r\n\r\n}\r\n\r\nrouter.addAuthor = (req, res) => {\r\n\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    var name = req.body.name\r\n    var keyword1 = req.body.keyword1\r\n    var keyword2 = req.body.keyword2\r\n    var numofbooks = req.body.numofbooks\r\n\r\n    if( name == \"\"){\r\n        res.json({ message: \"The author name can not be empty\"} )\r\n        return\r\n    }\r\n\r\n    Author.findOne({\r\n        name:name\r\n    },function (err, info) {\r\n        if(info){\r\n            res.json({ message: \"The author is already exist\",errmsg : err} )\r\n            return\r\n        }\r\n        var author = new Author({\r\n            name: name,\r\n            keyword1: keyword1,\r\n            keyword2: keyword2,\r\n            numofbooks:numofbooks\r\n        })\r\n        author.save(function(err) {\r\n            if (err)\r\n                res.json({ message: \"Author not added\", errmsg : err } )\r\n            else\r\n                res.json({ message: \"Author Successfully added\", data: author })\r\n        })\r\n    })\r\n}\r\n\r\nrouter.collectAuthor = (req, res) => {\r\n    var author = getByValue(author,req.params.id)\r\n\r\n    if (author != null) {\r\n        author.numofcollected += 1\r\n        res.json({status : 200, message : \"Collected Successful\" , author : author })\r\n    }\r\n    else\r\n        res.send(\"Author NOT Found - collect NOT Successful!!\")\r\n}\r\nrouter.collectAuthor = (req, res) => {\r\n\r\n    Author.findById(req.params.id, function(err,author) {\r\n        if (err)\r\n            res.json({ message: \"Author NOT Found!\", errmsg : err } )\r\n        else {\r\n            author.numofcollected += 1\r\n            author.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: \"Author is not being collected\", errmsg : err } )\r\n                else\r\n                    res.json({ message: \"Author Successfully collected!\", data: author })\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nrouter.removeCollection = (req, res) => {\r\n\r\n    Author.findByIdAndRemove(req.params.id, function(err) {\r\n        if (err)\r\n            res.json({ message: \"Author NOT Found!\", errmsg : err } )\r\n        else\r\n            res.json({ message: \"Author Successfully Deleted!\"})\r\n    })\r\n}\r\n\r\n\r\nmodule.exports = router"]}