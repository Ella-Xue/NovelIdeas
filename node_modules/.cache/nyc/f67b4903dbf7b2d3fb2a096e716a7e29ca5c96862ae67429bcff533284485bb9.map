{"version":3,"sources":["user.js"],"names":["User","require","express","router","Router","mongoose","connect","editPassword","req","res","findById","params","id","err","user","newpassword","body","password","json","message","errmsg","data","save","register","setHeader","username","email","findOne","info","login","userInfo","find","send","JSON","stringify","module","exports"],"mappings":"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","sourceRoot":"E:\\xueyi\\2020（1）\\AS\\NovelIdeas-master\\NovelIdeas-master\\routes","sourcesContent":["let User = require(\"../models/user\")\r\nlet express = require(\"express\")\r\nlet router = express.Router()\r\nlet mongoose = require(\"mongoose\")\r\nmongoose.connect(\"mongodb://localhost:27017/novels\")\r\n\r\n\r\n\r\nrouter.editPassword = (req,res)=>{\r\n\r\n    User.findById(req.params.id, function(err,user) {\r\n        var newpassword = req.body.password\r\n        if (err)\r\n            res.json({ message: \"User NOT Found!\", errmsg : err } )\r\n        else if(user.password == newpassword){\r\n            res.json({ message: \"No change to the Password\", data: user} )\r\n        }\r\n        else {\r\n            user.password = newpassword\r\n            user.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: \"Password Not changed!\", errmsg : err } )\r\n                else\r\n                    res.json({ message: \"Password Successfully changed!\", data: user })\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nrouter.register = (req,res) => {\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    var username = req.body.username\r\n    var password = req.body.password\r\n    var email = req.body.email\r\n\r\n\r\n    if( username == \"\"){\r\n        res.json({ message: \"The username can not be empty\"} )\r\n        return\r\n    }\r\n    if( password == \"\"){\r\n        res.json({ message: \"The password can not be empty\"} )\r\n        return\r\n    }\r\n    if( email == \"\"){\r\n        res.json({ message: \"The email can not be empty\"} )\r\n        return\r\n    }\r\n    User.findOne({\r\n        username:username\r\n    },function (err, info) {\r\n        if(info){\r\n            res.json({ message: \"The username is occupied\",errmsg : err} )\r\n            return\r\n        }\r\n        var user = new User({\r\n            username: username,\r\n            password: password,\r\n            email:email\r\n        })\r\n        user.save(function(err) {\r\n            if (err)\r\n                res.json({ message: \"User Not Registered\", errmsg : err } )\r\n            else\r\n                res.json({ message: \"User Successfully registered\", data: user })\r\n        })\r\n    })\r\n\r\n}\r\n\r\nrouter.login = (req,res) => {\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    var username = req.body.username\r\n    var password = req.body.password\r\n\r\n    if(password == \"\"|| username==\"\"){\r\n        res.json({ message: \"The username or password  can not be empty\"} )\r\n        return\r\n    }\r\n    User.findOne({\r\n        username:username\r\n    },function (err, user) {\r\n        if(user){\r\n            if(user.password == password){\r\n                res.json({ message: \"Sign in Successfully\",data:user})\r\n                return\r\n            }\r\n            res.json({ message: \"Wrong Password\"})\r\n        }\r\n        else{\r\n            res.json({ message: \"Username is not exist\"})\r\n        }\r\n\r\n    })\r\n}\r\n\r\nrouter.userInfo = (req, res) => {\r\n\r\n    res.setHeader(\"Content-Type\", \"application/json\")\r\n\r\n    User.find({ \"_id\" : req.params.id },function(err, user) {\r\n        if (err)\r\n            res.json({ message: \"User NOT Found!\", errmsg : err } )\r\n        else\r\n            res.send(JSON.stringify(user,null,10))\r\n    })\r\n}\r\nmodule.exports = router"]}